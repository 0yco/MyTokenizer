256:   
257:     
258: on
259:  t
260:    
261: or
262: in
263: de
264: se
265: pe
266: te
267: re
268:  a
269: ra
270: ti
271:  c
272:  th
273: is
274: me
275: tion
276: :

277:      
278: na
279: le
280:  o
281: al
282: 


283: st
284:  the
285: en
286: ce
287: ro
288: name
289: er
290: ""
291:  f
292: sel
293: self
294: def
295: rap
296:  `
297:  i
298:  in
299: at
300: sor
301: raph
302:  e
303: un
304: ype
305: ur
306:  re
307:  =
308: ut
309:  #
310:  w
311:  n
312: ._
313:         
314:  g
315: ing
316: th
317:  b
318:  is
319: ction
320: co
321: lo
322: ac
323:  s
324: .

325:  p
326: ue
327:  con
328:  to
329: tur
330: turn
331: )

332:  T
333: ensor
334:  self
335: ble
336: mp
337: one
338:        
339: ul
340: type
341:  no
342:  an
343: """
344: None
345:  d
346:  m
347:  if
348:  def
349: an
350: alue
351: vi
352: unction
353: xt
354: ack
355:  name
356: ss
357: op
358: .


359: put
360: ted
361: tr
362:  of
363:  "
364: con
365: text
366: able
367: vice
368:  return
369:  wi
370:  op
371: device
372: ec
373:  """
374: ar
375:  for
376:  A
377:  co
378:  be
379: ed
380: ger
381:  not
382: pera
383: cope
384: _st
385: peration
386: es
387:  -
388:  ex
389: li
390:  graph
391: ()
392: rea
393: ha
394: value
395:  ->
396:  st
397: ult
398:  _
399: nt
400: _f
401:  None
402: tro
403: trol
404: loc
405: _s
406: ist
407: ror
408: ault
409:  Th
410: to
411: tf
412: graph
413:  u
414:  with
415: _def
416:  and
417: ly
418: et
419: pro
420:  that
421: Er
422: Error
423: _stack
424: bj
425: Tensor
426: rom
427: ,

428: ter
429:  tensor
430: ):

431: (self
432: ver
433:  py
434: puts
435: ll
436:  context
437: low
438: ion
439: ci
440: Re
441:  as
442:  (
443: _name
444: _type
445: ten
446: di
447: ise
448:  use
449:  l
450: int
451: )


452: ode
453: ager
454:  function
455:  I
456:  this
457: tensor
458: lle
459: _e
460: ttr
461:  or
462:                 
463:  ma
464: as
465: ation
466: Operation
467: rg
468: _graph
469:          
470:  device
471: ort
472: el
473: _scope
474: ch
475:  The
476: pen
477: ts
478: Graph
479: Return
480:  ra
481:  wh
482:  value
483: _con
484: _in
485:  pyl
486:  pylint
487: ment
488: _op
489: ve
490: hape
491: llection
492: _function
493: cted
494: bjec
495: ate
496: den
497: _m
498: (

499:  list
500: set
501:  str
502:  raise
503:  tf
504: ty
505: De
506:  dis
507: ig
508: py
509: cess
510: per
511: read
512: Returns
513: ey
514: ecu
515:  ne
516:  scope
517:  attr
518:  de
519: up
520: _o
521: Value
522:  default
523: bu
524: nager
525:  control
526:  disable
527: la
528: stan
529:  """

530:  are
531:  pro
532: attr
533: penden
534: Op
535: ("
536: ap
537: ct
538: ent
539:  cal
540: ari
541: ali
542: _tensor
543: __
544: radi
545: ..
546:  If
547: pendenci
548: pendencies
549: ssion
550:  will
551:  ha
552:  objec
553:  on
554: access
555:  it
556: ore
557: =pro
558: =prote
559: =protected
560: -access
561:  N
562:  F
563:  crea
564: Def
565: ta
566: dd
567:  type
568:  @
569:  operation
570: it
571: ")

572: get
573: ati
574: radient
575:  comp
576: red
577: _to
578:  v
579: ()

580: location
581: _c
582: ariable
583: si
584:  dtype
585:  execu
586: mport
587: thon
588:  Arg
589:  Args
590: =None
591: so
592: str
593: _p
594: nable
595: reat
596:  used
597: _co
598: ex
599: .con
600:  R
601: _ex
602: fi
603:  collection
604: oo
605:  This
606: dtype
607:  S
608:  from
609:  C
610: session
611: ere
612: ry
613: flow
614: stance
615: ri
616:  new
617:  h
618:  el
619:  else
620:  Tensor
621:  string
622: _default
623: local
624:  me
625:  Value
626:  inputs
627: ibu
628: ==
629: ."""
630: and
631:  %
632: sion
633: tional
634: il
635:  ValueError
636: reator
637:  by
638: gis
639: lic
640: ust
641:  enable
642:  Returns
643: _de
644:  al
645: mple
646: urce
647: tain
648: um
649: .f
650: python
651: _re
652: race
653:  do
654:  [
655:  whi
656:  get
657:  can
658: ]:

659: ."""

660: lib
661: rue
662: .name
663: source
664:  import
665: version
666:  di
667: ot
668: sed
669: cep
670:  Type
671: ith
672: pre
673: _pb
674:  node
675: 



676:  __
677: unc
678: "

679: _device
680: key
681:  input
682: thread
683:  un
684: Optional
685: instance
686:  which
687: peci
688: _tf
689:  ops
690: ibute
691: aliz
692:  created
693:  Operation
694: _context
695:            
696: _dependencies
697: rent
698: (op
699: _local
700: from
701:  stack
702: port
703: Type
704:  eager
705: urrent
706: _inputs
707:  y
708:  call
709: _n
710: ff
711:  TypeError
712: `,
713:  manager
714: _map
715: ou
716: ge
717: ata
718:  isinstance
719: (name
720: iv
721: Eager
722: mo
723:  "

724: ding
725: control
726: iel
727: ield
728:  ``
729:  ```
730: Key
731: LE
732: _value
733: _u
734: __(
735:  execution
736:  try
737:  objects
738: run
739: inal
740:  speci
741: anager
742: proto
743: alse
744: tic
745:  must
746: comp
747: ",
748: Con
749: .T
750: utput
751: ser
752: qu
753:  tensorflow
754: ler
755: lement
756: .as
757: `.

758:  {
759:  when
760:  P
761: _eager
762:  have
763: _creator
764: andle
765: terna
766: uld
767:  all
768: lass
769:  sa
770: ke
771:  has
772: perty
773:  current
774: _mode
775: wrap
776: _or
777: vert
778: od
779: ]

780: list
781:  excep
782:  so
783: all
784:  object
785: ther
786:  values
787: ument
788: ...
789: _session
790: raceable
791: ternal
792:  we
793: .get
794: shape
795:  Ra
796:  giv
797:  thread
798: EagerTensor
799: ase
800: ould
801: thod
802: 's
803: ():

804: ined
805: ises
806:  set
807:  se
808:  For
809: ample
810:  proto
811: _shape
812: with
813:  does
814: :


815:  Raises
816:  pre
817:  given
818: til
819: St
820: AB
821: ABLE
822:  tensors
823: bo
824: _proto
825:  arg
826: ded
827:  Key
828: bel
829:  may
830:  specifi
831: ump
832:  pywrap
833: lock
834:  *
835: `.


836:  +
837:  example
838:  contain
839: stic
840:  except
841:  U
842: umpy
843: site
844: _str
845:  method
846: .Tensor
847:  shape
848:  operations
849: VA
850:  gradient
851: stru
852: alid
853: .python
854: osite
855: _types
856: )



857: _g
858: _control
859: add
860:  attribute
861: iginal
862:  Graph
863: atistic
864: ])

865:  add
866: _attr
867: RI
868: ner
869: der
870: ad
871: data
872: OD
873: sing
874: ))

875: property
876: ach
877:  No
878: try
879:  bu
880: ."
881: .function
882: lif
883: _b
884:  mode
885:  but
886:  names
887:  Se
888: ====
889:  regis
890: for
891: arg
892: tes
893: pli
894:  '
895:  TF
896:  constru
897: ary
898: pec
899: .A
900: (f
901:  ==
902: roup
903: `

904: ork
905: compat
906: ):
907:  sup
908:  allow
909: .TF
910: tem
911: alized
912:  variable
913:              
914:  compu
915:  colocation
916:  collections
917: ated
918: _export
919:  sh
920: led
921: bi
922: ()`
923: mat
924: stant
925: ttrValue
926: uter
927: ic
928:  la
929: ool
930:  su
931: fer
932: ol
933: ker
934: kern
935: kernel
936: ().
937:  In
938:  resource
939:  argument
940: .)
941: rate
942: mposite
943: (c
944: sert
945: variable
946:  ap
947: back
948: _flow
949:  True
950:  called
951: que
952: @tf
953: time
954: su
955:  ct
956:  ctx
957: .context
958: uting
959: values
960: default
961: _collection
962: opy
963:  en
964: rame
965: out
966: node
967: _element
968: sult
969: False
970: In
971: _list
972:  one
973: Co
974: ard
975: _VA
976:  dependencies
977: isting
978: ps
979: RIABLE
980: romo
981: lob
982: lobal
983:  elif
984: ally
985:  only
986:  ac
987: .__
988: _dtype
989:  key
990: 't
991: ecuting
992: _operation
993: .")

994:  returned
995: _input
996:  ...
997: _obj
998:  run
999: RIABLES
1000:  L
1001:  W
1002: id
1003: .op
1004:  should
1005: TE
1006:  ch
1007:  pa
1008: obj
1009: .Graph
1010: inputs
1011: _VARIABLES
1012:  types
1013: fig
1014: _lib
1015: =False
1016: dex
1017: uple
1018:  EagerTensor
1019: True
1020: >>
1021:  more
1022: .device
1023: .ex
1024:  enabled
1025: ilding
1026: mpty
1027: bili
1028: bility
1029: tered
1030: locate
1031:  ad
1032: ested
1033:  outer
1034: ile
1035: work
1036: _util
1037: error
1038: _data
1039: prec
1040: ecution
1041:  other
1042:       
1043:  session
1044: resource
1045: _by
1046: `.
1047: oc
1048:  map
1049: gradient
1050:  any
1051:  colle
1052:  functions
1053:  An
1054: ramework
1055: _t
1056: bject
1057: init
1058: _func
1059:  func
1060: context
1061: prese
1062: ),
1063:  code
1064: us
1065: iti
1066: ine
1067:                         
1068: =[
1069: handle
1070: _ref
1071: atibility
1072: Composite
1073: CompositeTensor
1074: _with
1075: (v
1076:  original
1077: colocation
1078:  you
1079:  See
1080: age
1081: tor
1082:  Con
1083: cor
1084:  internal
1085: class
1086: dis
1087: eck
1088: manager
1089: pr
1090: present
1091: ym
1092: ymbo
1093: ymbolic
1094: copy
1095:  class
1096: .shape
1097:  Run
1098:  Runtime
1099:  RuntimeError
1100: odeDef
1101: ME
1102: _Operation
1103:  specified
1104: .v
1105:  been
1106:  compute
1107:  ```


1108: _la
1109: ved
1110: ir
1111: gistry
1112:  lo
1113: .compat
1114: (tensor
1115:  False
1116:  result
1117: reate
1118: ]


1119:  same
1120:  out
1121: _di
1122:  create
1123: eren
1124: pend
1125: ctionary
1126: _ops
1127: res
1128:  statistic
1129: Variable
1130: _label
1131: side
1132: tainer
1133: scope
1134: CE
1135: IN
1136:  Optional
1137:  handle
1138: PI
1139:  bool
1140: he
1141: (device
1142:  "_
1143: ":

1144: .AttrValue
1145:  using
1146: rect
1147: tive
1148: .constant
1149: ([
1150:  returns
1151:  output
1152: ).

1153: ant
1154: rad
1155:  )
1156: _eagerly
1157: lace
1158:  registered
1159: Control
1160:  dictionary
1161:  yield
1162:  ig
1163:  ign
1164:  collect
1165:  Re
1166: ping
1167: .framework
1168: form
1169: _arg
1170: ="
1171:  TOD
1172:  TODO
1173:  API
1174: ow
1175:  represent
1176:  te
1177: om
1178: ze
1179: ew
1180: ()


1181: _en
1182: .graph
1183: .S
1184:  its
1185:  strings
1186:  copy
1187: ON
1188:  per
1189: ull
1190: _conversion
1191: fter
1192: _execution
1193: .")


1194: DType
1195: ique
1196: _string
1197:  M
1198:  case
1199:  man
1200:  element
1201:  le
1202: ulti
1203: ],
1204:  here
1205: =True
1206: ferred
1207: verri
1208: [str
1209: ffer
1210:  constructed
1211:  added
1212: gy
1213: _existing
1214: ses
1215:  error
1216: (b
1217: _v
1218: _me
1219: .g
1220: ultip
1221: fy
1222: PU
1223: men
1224: cit
1225: eed
1226: not
1227: _for
1228:  within
1229:  cor
1230: pon
1231: ign
1232:  KeyError
1233: inalized
1234: _shapes
1235: doc
1236: rategy
1237:  Promo
1238:  PromoM
1239:  PromoMode
1240:  at
1241: tera
1242: ence
1243: .c
1244: valid
1245:  dtypes
1246:  traceable
1247: .type
1248: _contextlib
1249: ats
1250: move
1251:  "/
1252: ip
1253:  without
1254:  pass
1255: exit
1256:  obj
1257:  convert
1258: like
1259:  int
1260: Py
1261: sc
1262: item
1263: _spec
1264: defined
1265: ste
1266: stead
1267: ber
1268: .executing
1269:  expli
1270:  explicit
1271:  place
1272:  empty
1273:  ret
1274: OpDef
1275: _po
1276: ful
1277: respon
1278: ame
1279:  assert
1280:  state
1281: _thread
1282:  label
1283:  nested
1284:  container
1285: _strategy
1286: licy
1287: ========
1288: =g
1289:  NoReturn
1290: orted
1291: _registry
1292: precated
1293: _on
1294: au
1295: [None
1296: Object
1297: .dtype
1298: numpy
1299:  multip
1300:  diff
1301: date
1302:  tuple
1303: (x
1304: ces
1305:  instead
1306:  data
1307:  variables
1308: feren
1309:  conversion
1310: Stack
1311:  executed
1312: .Traceable
1313:  {}
1314:  each
1315: "])

1316: LO
1317: .contextmanager
1318: af
1319: AL
1320: _key
1321: container
1322:  creator
1323: "):

1324: distr
1325: qui
1326:  B
1327: NT
1328: ES
1329: import
1330:  Itera
1331:  Iterator
1332: ssage
1333: -or
1334:  after
1335: wit
1336: witch
1337: tensorflow
1338:  provi
1339:  callable
1340: Context
1341: ting
1342:  multiple
1343: ymbolicTensor
1344:  attrs
1345: ray
1346: (e
1347: mented
1348: rectly
1349:  G
1350: ong
1351:  defined
1352:  defin
1353:  initi
1354:                       
1355: sume
1356: ure
1357:  being
1358: ind
1359:  []

1360: rary
1361: stack
1362: assed
1363: input
1364:  correspon
1365:  abo
1366: =["
1367: statistic
1368: collection
1369: .add
1370:  saved
1371: igh
1372: ww
1373:  Un
1374: RA
1375:  graphs
1376: allable
1377: quence
1378:  Any
1379: buf
1380:  core
1381: api
1382: raceback
1383: _a
1384: .is
1385: rge
1386:  po
1387: ).
1388: ))


1389: ms
1390: mplemented
1391: ay
1392:  back
1393: The
1394:  would
1395:  ev
1396: building
1397: append
1398:  mat
1399: NodeDef
1400:  valid
1401:  instance
1402: GraphDef
1403: _group
1404:  field
1405:  ol
1406:  old
1407:  passed
1408: _manager
1409: ils
1410: -doc
1411: -re
1412:  ignore
1413: most
1414:  TensorF
1415:  TensorFlow
1416:  requi
1417: ither
1418: ast
1419:  compat
1420: ported
1421:  unique
1422: utation
1423:  caller
1424:  many
1425:  text
1426:  differe
1427:  different
1428: create
1429: .re
1430:  Note
1431:  doesn
1432:  hasattr
1433: _output
1434: ference
1435: _O
1436: _R
1437:  Py
1438:  Python
1439: .mat
1440:  fol
1441:  follow
1442:  ass
1443:  was
1444:  mapping
1445:  {}

1446:  E
1447: _from
1448:  contains
1449:  final
1450:  finally
1451: lear
1452:  Op
1453:  also
1454:  mo
1455: names
1456:  colocate
1457:  exist
1458:  deta
1459:  details
1460: .control
1461: global
1462: _policy
1463: Manager
1464: vo
1465: 11
1466: used
1467: .e
1468: .p
1469: util
1470: und
1471: _S
1472: _merge
1473: OTE
1474: ls
1475:  check
1476: (node
1477: (_
1478: _fn
1479: po
1480:  SymbolicTensor
1481: _out
1482: .n
1483:  Tensors
1484:  some
1485: _enum
1486:  >>
1487:  >>>
1488:  tra
1489:  need
1490: verride
1491: pu
1492: (None
1493: `s
1494: )):

1495: ub
1496: ).


1497:  buffer
1498:  up
1499: ped
1500:  indi
1501:  uses
1502:  these
1503: _colocation
1504: ODE
1505:  like
1506:  Foo
1507: Keys
1508: _lock
1509: _kernel
1510: _functions
1511: library
1512: [name
1513: [op
1514: "


1515:  under
1516:  O
1517: ION
1518:  Context
1519:  numpy
1520:  config
1521: .util
1522:  NOTE
1523: string
1524: ents
1525: From
1526:  x
1527:  Not
1528:  len
1529: (a
1530: outer
1531:  D
1532:  export
1533:  kernel
1534:  than
1535: ark
1536:  ta
1537: _tensors
1538: ward
1539: .append
1540: ]]:

1541: GE
1542:  r
1543: ply
1544: .run
1545: ates
1546:  following
1547: peri
1548: periment
1549: _P
1550:  execute
1551: _gradient
1552: gister
1553: Default
1554: bind
1555: rapper
1556: andard
1557: -return
1558: -y
1559: -yield
1560:  specifies
1561:  controller
1562:  All
1563: //
1564: LI
1565:  either
1566: Str
1567: versions
1568: irst
1569: cord
1570:  global
1571: enter
1572: _comp
1573: atible
1574:  item
1575: loat
1576:  EagerTensorType
1577: atus
1578: ception
1579:                    
1580:  NotI
1581:  NotImplemented
1582:  NotImplementedError
1583:  directly
1584:  into
1585: (m
1586: du
1587:  num
1588: fore
1589:  `_
1590: plied
1591:  feed
1592: fix
1593: ture
1594:  pack
1595: ].
1596:  preferred
1597:  where
1598: _OP
1599: alize
1600: kes
1601: ession
1602:  gen
1603:  gene
1604:  %

1605: output
1606: .G
1607: .set
1608: we
1609: iz
1610: collections
1611:  building
1612: ous
1613:  inner
1614:  scopes
1615:  standard
1616: variables
1617: MENT
1618:  V
1619:  Y
1620: tt
1621:  required
1622: iting
1623:  np
1624: dev
1625: gg
1626: denti
1627:  k
1628: _only
1629: Stats
1630:  calls
1631:  supported
1632:  computation
1633: _code
1634:  such
1635:  We
1636: .s
1637: (obj
1638: ssi
1639:  getattr
1640: _numpy
1641: umPy
1642: _index
1643:  Eager
1644:  support
1645: 32
1646:  reg
1647: ular
1648: way
1649: reates
1650: _as
1651:  consume
1652: _node
1653: _dict
1654:  expe
1655: ually
1656:                      
1657: radients
1658: ased
1659:  match
1660:  protoco
1661:  protocol
1662:  attributes
1663: Add
1664:  """


1665:  reference
1666:  desc
1667:  descri
1668: long
1669: locations
1670: _groups
1671:  assign
1672:  property
1673: ('
1674: colocate
1675: (attr
1676: "_
1677: old
1678:  si
1679: .setter
1680: hared
1681: afe
1682:  provided
1683: .Variable
1684: _state
1685: ControlDe
1686: ControlDependencies
1687: -to
1688: ain
1689: Function
1690: (...
1691: inner
1692: LA
1693:  promo
1694:  file
1695: ://
1696: are
1697: ations
1698:  ContextManager
1699:  first
1700: gging
1701:  lock
1702:  Remove
1703:  switch
1704: .B
1705: Device
1706: fied
1707: now
1708:  over
1709:  perform
1710: ause
1711:  ti
1712:  time
1713: ]):

1714:  possi
1715:  possible
1716:  prog
1717:  progra
1718: ()



1719: _repr
1720: cal
1721: .item
1722:  NumPy
1723: umm
1724: (),
1725: array
1726: format
1727:  beha
1728:  them
1729:  del
1730:  order
1731:  ran
1732: (s
1733:  mem
1734:  produ
1735:  H
1736:  pri
1737: vate
1738:  bet
1739:  alway
1740:  always
1741: atic
1742:  grad
1743: ok
1744:                
1745:  It
1746:  gradients
1747:  pub
1748:  public
1749:  prefix
1750:  compatibility
1751: _N
1752: (graph
1753: String
1754: Arg
1755: Argument
1756: lev
1757:  calling
1758:  explicitly
1759:  flow
1760:  chan
1761: ating
1762:  there
1763:  outputs
1764:  active
1765: '):

1766: Get
1767: etch
1768: ges
1769: Gradient
1770: tering
1771:  statistics
1772: lu
1773:  Wh
1774: ince
1775: ity
1776:  Session
1777: unctions
1778:  inside
1779:  proper
1780: ready
1781: line
1782: -too
1783: -long
1784: /c
1785: pybind
1786:  refer
1787: _controller
1788: GraphKeys
1789: ush
1790: _inner
1791:  currently
1792: ibution
1793:  innermost
1794: config
1795: _variables
1796: ache
1797: ")
1798: OU
1799: TION
1800: ning
1801: tern
1802: .core
1803: ator
1804: _utils
1805: precation
1806: .me
1807: ecause
1808: (context
1809: stra
1810: wise
1811:  conver
1812: ())

1813: ustom
1814: end
1815: new
1816: .value
1817:  constant
1818: =dtype
1819: ":
1820: =name
1821: outputs
1822:  block
1823: _outputs
1824: Ex
1825:  )

1826: tent
1827: ory
1828:  GPU
1829:  sing
1830: ord
1831:  undefined
1832: temp
1833:  sub
1834: gh
1835: )}
1836: rou
1837: .convert
1838: ffec
1839:  backward
1840:  based
1841: .NodeDef
1842:  NodeDef
1843: _bytes
1844: .items
1845: .attr
1846:  group
1847: Input
1848: List
1849:  seri
1850:  serialized
1851:  creat
1852:  creating
1853: roto
1854: mul
1855: .Session
1856: ],

1857:  computed
1858:  indic
1859: ints
1860: cy
1861:  Operations
1862:  existing
1863: _val
1864:  inform
1865:  before
1866: .TraceableObject
1867:  about
1868: king
1869: fo
1870: .Re
1871:  par
1872:  correspond
1873:  yet
1874:  then
1875: _and
1876:  gu
1877:  shared
1878:  com
1879: ook
1880: [-
1881:  betwe
1882:  between
1883: safe
1884:  threads
1885: _use
1886: _is
1887: .TraceableStack
1888: tim
1889: timiz
1890: omatic
1891: pri
1892:  arguments
1893: check
1894: _not
1895: ](
1896: ttps
1897:  library
1898: naps
1899: napsh
1900: napshot
1901: (tf
1902:  Name
1903:  executing
1904: _can
1905: _candi
1906: _candidate
1907: ControlDependenciesControl
1908: ControlDependenciesController
1909: distribution
1910: distribute
1911: EV
1912: EVI
1913: EVICE
1914: _PLA
1915: _PLACE
1916: _PLACEMENT
1917: icen
1918: www
1919: .or
1920: .org
1921: ================
1922:  construct
1923: -name
1924:  record
1925: _api
1926: _call
1927: _callback
1928:  registry
1929: corator
1930: .de
1931:  work
1932:  remo
1933: auge
1934:  dict
1935: Spec
1936: ."""


1937: _null
1938: inen
1939: ineno
1940: igna
1941:  sk
1942:  skip
1943:  because
1944: ail
1945: (t
1946:  program
1947: _text
1948: Copy
1949: ake
1950:  creation
1951: size
1952: len
1953: _tuple
1954:  content
1955: ety
1956:  single
1957:  number
1958: grad
1959: _dims
1960:  !
1961:  !=
1962:  supplied
1963:  Attr
1964:  Attribute
1965:  AttributeError
1966: .building
1967: ters
1968:  packed
1969: Can
1970: pa
1971: ),

1972: mplement
1973: _convert
1974: ffect
1975: (value
1976: LID
1977: _NA
1978: _NAME
1979: _RE
1980: _REGE
1981: _REGEX
1982: -Z
1983: -Za
1984: -z
1985: Creates
1986: _se
1987:                        
1988: Proto
1989:                           
1990: .In
1991:  takes
1992:  representing
1993:  specify
1994: .match
1995: (inputs
1996: ',
1997: .inputs
1998:  corresponding
1999: An
2000: Any
2001: .outputs
2002:  assigned
2003:  above
2004: (function
2005: experiment
2006:  attemp
2007: ases
2008:  When
2009: just
2010:  Look
2011: ron
2012: LOB
2013: LOBAL
2014: ditional
2015: _override
2016: functions
2017: unf
2018: timizer
2019:  ""
2020: utomatic
2021:  initializ
2022: Callable
2023:  @_
2024: _finalized
2025: https
2026: _pybind
2027:  since
2028:  true
2029: tadata
2030: .pe
2031: .pee
2032: .peek
2033: vera
2034: ored
2035:  lif
2036: nested
2037: _uid
2038:  my
2039: quare
2040: DefaultGraph
2041: _none
2042: _nonempty
2043: compatibility
2044: _compatibility
2045: MODE
2046: RAIN
2047: `:
2048: ight
2049:  Licen
2050: IT
2051: las
2052: -b
2053:  Callable
2054:  ty
2055: attern
2056:  Union
2057:  composite
2058:  errors
2059:  decorator
2060:  deprecated
2061: warg
2062: ("_
2063: ound
2064: min
2065: _C
2066: _IN
2067:  (

2068: _id
2069: (o
2070:  user
2071: nown
2072:  "%
2073: func
2074:  brea
2075:  break
2076: tri
2077: tions
2078:  read
2079: calar
2080: yle
2081: _internal
2082: index
2083: ())


2084: (n
2085: darray
2086: ves
2087:  pytype
2088: repr
2089: Not
2090: _version
2091: rray
2092:  contents
2093: opi
2094:  define
2095: _resource
2096: convert
2097:  backwards
2098: _composite
2099: dified
2100:  AttrValue
2101: ++
2102: xtra
2103: .OpDef
2104: _desc
2105: _F
2106: validArgument
2107: validArgumentError
2108:  genera
2109:  model
2110:  dependen
2111:  dependency
2112: `,

2113:  expected
2114: original
2115: _pro
2116:  information
2117:  equ
2118: [Any
2119: ATE
2120: Set
2121: .py
2122: )))

2123: assert
2124: hile
2125:  hel
2126: ling
2127: FromString
2128: Attr
2129:  clear
2130: of
2131: TF
2132:  corresponds
2133:  defines
2134: _handle
2135:  OpStats
2136:  how
2137: ooh
2138: oohic
2139: oohickey
2140: _LO
2141:                   
2142:  eagerly
2143: uring
2144: afety
2145:  mut
2146: _original
2147: finalized
2148: VE
2149: etchable
2150:  were
2151: ual
2152: ority
2153:  doc
2154: (key
2155:  nest
2156: ignature
2157:  already
2158: [Callable
2159: store
2160: .tensorflow
2161: /tensorflow
2162: rain
2163: Que
2164: Queue
2165:  behavi
2166:  behavior
2167:  overri
2168:  their
2169:  appro
2170:  temp
2171: ores
2172:  bi
2173: stall
2174:  mark
2175: _used
2176:  placed
2177:  off
2178:  offset
2179: queue
2180:  stateful
2181: .float
2182:  ..
2183: ({
2184:  labels
2185: _copy
2186: Wrapper
2187: )[
2188: server
2189: RAINABLE
2190: _fns
2191: 20
2192: ights
2193:  License
2194: the
2195: SE
2196: AR
2197:  imp
2198:  go
2199:  sy
2200:  cast
2201:  TypeV
2202:  TypeVar
2203:  message
2204:  versions
2205:  avo
2206: -import
2207: unused
2208: _lo
2209:  logging
2210: dentity
2211:  traceback
2212: _T
2213: Base
2214: _A
2215: sage
2216: .enable
2217: .D
2218: .DType
2219: (object
2220: raw
2221:  Null
2222:  NullContext
2223:  NullContextmanager
2224:  otherwise
2225:  av
2226:  avail
2227:  available
2228:  conv
2229:  scalar
2230:  repr
2231:  format
2232:  devices
2233: ummari
2234: internal
2235: (dtype
2236:  invo
2237:  callback
2238: =attr
2239: ative
2240: __,
2241:  CPU
2242: .ndarray
2243: ep
2244: pack
2245: =re
2246: =redefined
2247: -outer
2248: has
2249: mem
2250: only
2251: 42
2252: be
2253: .copy
2254: ost
2255: (shape
2256:  well
2257: perator
2258:  [

2259: ition
2260: ")


2261: (g
2262: sumer
2263:  eval
2264: [tensor
2265:  creates
2266: Cannot
2267: }")

2268: _h
2269: 15
2270: -arg
2271: [EagerTensor
2272: Un
2273: Conver
2274: Converts
2275:  consumed
2276: ()`.

2277:  wan
2278:  wants
2279:  invalid
2280: (values
2281:  sequence
2282: .CompositeTensor
2283: ()`.


2284: "Re
2285:  res
2286: jo
2287: PE
2288: =[])

2289: _traceback
2290:  extra
2291: com
2292:  don
2293: _sequence
2294:  Add
2295: very
2296: ish
2297: .message
2298:  constructor
2299:  List
2300:  By
2301:  represents
2302: Si
2303: Size
2304:  <
2305: ose
2306: VALID
2307: _locations
2308:  change
2309:  equiv
2310:  equiva
2311:  equivale
2312:  equivalent
2313:  itself
2314:  ro
2315:  root
2316:  instances
2317:  member
2318:  '/
2319:  descrip
2320:  description
2321:  nodes
2322: Pri
2323: Private
2324:  buf
2325:  shapes
2326: unt
2327:  oneof
2328: .list
2329: CT
2330:  even
2331: UN
2332: Run
2333: .*
2334: .Registry
2335:  defining
2336: erenti
2337: [[
2338: .lo
2339: okup
2340:  inc
2341:  inclu
2342:  +=
2343: ide
2344:  just
2345:  raised
2346:  during
2347: group
2348:  depend
2349:  seed
2350: RS
2351:  optimizer
2352: unique
2353:  they
2354: sses
2355:  sti
2356:  still
2357: ((
2358:  nesting
2359:  apply
2360:  ```

2361:  make
2362: [...
2363: [...,
2364:  previ
2365:  previous
2366: =line
2367: train
2368:  star
2369: tesize
2370: .exten
2371: .extend
2372: _Graph
2373:  while
2374:                            
2375: sive
2376: wri
2377: write
2378: elper
2379:  wrapper
2380: ving
2381:  "/":

2382: _metadata
2383: _objs
2384:  conc
2385:  appropri
2386:  appropriate
2387:  sets
2388: _collections
2389:  sure
2390:  ignored
2391:  reset
2392: ".

2393:  pr
2394:  print
2395: sets
2396:  newly
2397: .pop
2398: ked
2399: _top
2400:  trac
2401:  Ops
2402: man
2403: strings
2404:  runs
2405:  implement
2406:  Uses
2407: -local
2408: _outer
2409: SES
2410:  automatic
2411:  subset
2412: DefaultGraphStack
2413: ILE
2414: YN
2415: YNC
2416: execution
2417:  server
2418:  local
2419: CAL
2420: _info
2421: My
2422: MyOp
2423: _safety
2424: licing
2425:  Ap
2426: ersion
2427: ;

2428: ance
2429:  You
2430:  ob
2431: plic
2432:  distr
2433:  specific
2434: .proto
2435:  avoid
2436:  protobuf
2437: invalid
2438: _tfe
2439: oring
2440:  pydev
2441: _callbacks
2442: .tf
2443: EagerTensorBase
2444: ")



2445:  once
2446: _gauge
2447: /api
2448: ",

2449: _D
2450: [type
2451:  provide
2452: pla
2453: play
2454: .M
2455:  lineno
2456:  non
2457:  times
2458:  **
2459: gac
2460: gacy
2461: teger
2462:  items
2463: __.
2464: (py
2465: (pywrap
2466: cls
2467: __)

2468: ify
2469: CopyFrom
2470: (type
2471: ).__
2472: bool
2473:  >
2474: zero
2475:  im
2476: =%
2477: Status
2478: status
2479: _exception
2480: ream
2481:  never
2482:  table
2483: sure
2484:  Use
2485: memory
2486: view
2487:  compatible
2488: sider
2489:  produce
2490: ever
2491:  produces
2492:  now
2493:  remove
2494: opies
2495: =self
2496:  ]


2497: [int
2498: deprecation
2499: .deprecated
2500: :"
2501: _dim
2502: _consumer
2503: apture
2504:  super
2505: 71
2506: sg
2507: (tensors
2508: "A
2509:  throu
2510:  through
2511:  accep
2512: ]]
2513: [Un
2514: [Union
2515:  '_
2516:  '_'
2517:  results
2518:  cases
2519:  effect
2520: /or
2521: dexed
2522: dexedS
2523: dexedSli
2524: dexedSlices
2525: =compat
2526: /f
2527: (mr
2528: (mrry
2529: _.
2530: _.\
2531: _.\\
2532: ]*
2533: To
2534:  every
2535: .InvalidArgumentError
2536:  Convert
2537: level
2538: .matmul
2539: `)
2540: [Operation
2541:  Valid
2542:  Used
2543: levant
2544:  describ
2545: "Rece
2546: "Receiv
2547: "Received
2548:  whose
2549:  lar
2550:  unused
2551: (i
2552:  (%
2553:  process
2554: cessing
2555:  useful
2556:  methods
2557:  location
2558:  evalu
2559: ne
2560: by
2561: :@
2562: ('/
2563: gpu
2564: ='
2565:  Traceable
2566: .obj
2567: '

2568:  keys
2569:  prev
2570: .colocate
2571:  index
2572:  help
2573: _OperationGet
2574: Bu
2575: Name
2576: =func
2577: (func
2578: .List
2579: .ListValue
2580: (list
2581:  fields
2582:  ("
2583: `."""

2584: perimental
2585:  ",
2586: lean
2587: ages
2588: slo
2589: slots
2590:  ["_
2591: "]


2592: erentiable
2593: ration
2594: .lookup
2595:  operator
2596:  initial
2597: .statistic
2598:  pic
2599: les
2600:  GraphDef
2601:  partic
2602:  particular
2603:  containing
2604: [:
2605:  construction
2606: nch
2607: nchron
2608: lated
2609:  additional
2610: __()

2611:  #

2612:  stacks
2613: arning
2614:  necess
2615: fic
2616:  next
2617: eedable
2618: this
2619:  see
2620:  act
2621: compu
2622: compute
2623: _cache
2624: ave
2625:  creators
2626:  Yield
2627:  Yields
2628: tep
2629:  ke
2630:  maint
2631:  maintain
2632:  want
2633:  simp
2634:  simply
2635:  keyw
2636:  keyword
2637: ]]]:

2638: .default
2639:  finalized
2640:  cannot
2641:  version
2642:  mean
2643: code
2644:  inter
2645: /ex
2646: Defined
2647: DefinedFunction
2648: tin
2649: ice
2650:  conf
2651:                                    
2652:  generate
2653:  refers
2654:  exists
2655: ."

2656:  coll
2657: (collection
2658:  Co
2659:  Collection
2660: yer
2661:  constra
2662: clo
2663:  resets
2664: ignore
2665:  overrid
2666:  overridden
2667: lea
2668: leared
2669:  nor
2670: isinstance
2671: EX
2672:           
2673: }):

2674: _run
2675: _outside
2676:  automatically
2677: job
2678:  As
2679:  Ex
2680: .stack
2681: _switch
2682: _switches
2683: (default
2684:  entering
2685: pat
2686: .Con
2687: .Config
2688: .ConfigProto
2689:  DEVICE
2690: EA
2691: _MODE
2692:  seman
2693:  semantic
2694: UM
2695: UMM
2696:  LO
2697: exc
2698: _current
2699: .handle
2700: pensive
2701: _len
2702: FF
2703:  promotion
2704: LEG
2705: LEGA
2706: LEGAC
2707: LEGACY
2708: LL
2709: AF
2710: AFE
2711: _style
2712:  obtain
2713: less
2714:  ag
2715:  CON
2716: TIONS
2717:  li
2718: lasses
2719: ab
2720:  enum
2721:  npt
2722: 14
2723: =invalid
2724: -order
2725: .eager
2726:  mon
2727:  monit
2728:  monitoring
2729: lat
2730: identity
2731:  bound
2732: OpStats
2733: 30
2734: ix
2735: -in
2736:  These
2737:  removed
2738: ality
2739: hether
2740: TER
2741: TERN
2742: _TABLE
2743:  identi
2744: User
2745: .raw
2746: (dev
2747: >"
2748:  saf
2749:  mis
2750:  typ
2751:  typic
2752:  typically
2753: ))



2754: (contextlib
2755: .Ab
2756: .Abstra
2757: .Abstract
2758: .AbstractContext
2759: .AbstractContextManager
2760: kwarg
2761: kwargs
2762: .TFE
2763: _compatible
2764:  .
2765:  "<
2766: ("__
2767: .Py
2768:  symbolic
2769: __(

2770:  cls
2771: dict
2772: verify
2773: _bro
2774: _broad
2775: _broadc
2776: _broadcast
2777: Create
2778:  invoke
2779: .m
2780:  const
2781:  special
2782:  uni
2783: ().__
2784: =attribute
2785: -error
2786: redu
2787: NotO
2788: NotOk
2789: NotOkStatus
2790: NotOkStatusEx
2791: NotOkStatusException
2792: lpack
2793:  stream
2794: Pack
2795:  EagerTensors
2796:  performance
2797:  array
2798: memoryview
2799:  zero
2800:  rank
2801: _ar
2802: _arr
2803:  memory
2804:  How
2805:  However
2806: .,
2807:  performant
2808:  private
2809: pective
2810:  way
2811:  regular
2812:  known
2813: num
2814:  dest
2815: _fun
2816: dre
2817: Shape
2818:  initialized
2819: "Tensor
2820:  z
2821:  zip
2822:  implemented
2823:  what
2824:  look
2825: dtypes
2826: older
2827: posed
2828: ough
2829:  expect
2830:  event
2831:  eventually
2832: "All
2833: },
2834:  accepted
2835:  red
2836:  redund
2837:  redundant
2838:  )



2839: preferred
2840: ume
2841: _%
2842:  unmo
2843:  unmodified
2844:  Other
2845: /framework
2846: .fi
2847:  extract
2848: ky
2849:  might
2850: AttrValue
2851: inish
2852:  validates
2853:  indicates
2854:  end
2855: -type
2856:  replic
2857: .By
2858: .Byte
2859: .ByteSize
2860: 40
2861: (control
2862: itialize
2863: _post
2864: _processing
2865: (input
2866:  indirectly
2867:  managers
2868:  There
2869: arily
2870: wn
2871: .st
2872: CATE
2873: Sets
2874: [t
2875:  locations
2876:  applied
2877: ines
2878: NODE
2879:  Then
2880:  TraceableObject
2881:  coloc
2882:  prevent
2883: lease
2884: _same
2885: ached
2886: While
2887: .node
2888: .FromString
2889: Buffer
2890: _buf
2891: Clear
2892: wr
2893: _set
2894:  setting
2895:  none
2896:  us
2897: Register
2898: _grad
2899: .register
2900: Di
2901: No
2902:  made
2903:  attempt
2904: _stats
2905:  resources
2906:  include
2907:  doohickey
2908: Foo
2909: trie
2910:  making
2911:  ","
2912:  comm
2913:  Lookup
2914:  LookupError
2915: qual
2916:  trail
2917:  trailing
2918: ATION
2919: _LOC
2920: _LOCK
2921: _G
2922: _GR
2923: _GROU
2924: _GROUP
2925: _RUN
2926:  Using
2927:  Def
2928: -safe
2929:  synchron
2930:  vari
2931:  various
2932: Loc
2933: Lock
2934:  modi
2935:  wa
2936: mil
2937: milar
2938:  could
2939: -level
2940: seed
2941: .O
2942: _versions
2943: Version
2944: VersionDef
2945: .GRA
2946: .GRAP
2947: .GRAPH
2948:  Set
2949: unfetchable
2950: vers
2951:  last
2952:  losses
2953:  buil
2954:  OpDef
2955:  GraphType
2956: 10
2957: Exiting
2958: eso
2959: esource
2960:  compo
2961:  depends
2962:  previously
2963:  restore
2964:  [`
2965: `](
2966: /code
2967: /core
2968: inalize
2969:  After
2970: QueueRun
2971: QueueRunner
2972:  Internal
2973:  interf
2974:  interfa
2975:  interface
2976:  bytesize
2977: .library
2978: .GraphDef
2979:  ano
2980:  another
2981: /g
2982: oth
2983:  contin
2984:  continue
2985:  whe
2986:  whether
2987:  overwrite
2988:  checks
2989: _helper
2990: _Operations
2991:  log
2992:  Apply
2993:  mapped
2994:  mess
2995:  messages
2996:  snapshot
2997: snapshot
2998: "]:

2999: _locked
3000:  ":"
3001:  Looks
3002: \"
3003:  exc
3004: err
3005: _msg
3006: sertion
3007:  makes
3008: ():
3009: -ex
3010:  trea
3011:  treated
3012:  Make
3013: (names
3014:  fil
3015:  means
3016:  collected
3017: _all
3018:  ""

3019: ,line
3020:  push
3021: ured
3022: /inner
3023:  stores
3024: my
3025: (...,
3026: -set
3027:  foo
3028: closing
3029:  constraints
3030: plies
3031:  layer
3032: .push
3033: /device
3034: _of
3035: IF
3036: IFO
3037:  most
3038:  rele
3039:  cleared
3040: .reset
3041: .container
3042:  q
3043:  domin
3044:  dominated
3045:  ...

3046: pred
3047:  tr
3048:  trig
3049:  loss
3050: zation
3051:  buffers
3052: _attrs
3053:  Install
3054: ({"
3055: _labels
3056: _mapping
3057: _mappings
3058: _this
3059: .distribute
3060: uto
3061: .TensorSpec
3062: _assert
3063:  bias
3064: .one
3065: .ones
3066:  exception
3067:  init
3068:  outermost
3069: _entry
3070: .w
3071: (config
3072: nables
3073: (TF
3074:  picked
3075: _SILE
3076: _SILENT
3077: OR
3078: .DEVICE
3079:  argv
3080:  main
3081: igrate
3082:  Tensorflow
3083: _item
3084: ummary
3085: UE
3086: ING
3087:  LOCAL
3088:  TRAINABLE
3089: ESOU
3090: ESOUR
3091: ESOURCE
3092: (eager
3093:  Collections
3094: [Optional
3095: _symbolic
3096: __(*
3097: .scope
3098: _rep
3099: _replace
3100:  expensive
3101:  grou
3102:  grouped
3103: off
3104: legacy
3105: _slicing
3106: #

3107:  sof
3108:  soft
3109:  distribu
3110:  distributed
3111: AS
3112:  expre
3113: ang
3114: ================================
3115: -bad
3116:  threading
3117:  typing
3118:  Pattern
3119:  ab
3120:  full
3121:  imported
3122: filer
3123:  deprecation
3124: _ab
3125: _abc
3126:  kwarg
3127: ara
3128:  functionality
3129: _U
3130: PES
3131: _usage
3132: .Bool
3133: .BoolG
3134: .BoolGauge
3135: ops
3136: Whether
3137: UserDevice
3138: UserDeviceSpec
3139: Store
3140: -s
3141: .dis
3142: .display
3143:  dev
3144:  fname
3145: lineno
3146: known
3147:  safe
3148:  De
3149:  Deprecated
3150:  integer
3151: ID
3152:  representation
3153:  converts
3154:  formatting
3155:  para
3156:  paralle
3157:  parallel
3158:  access
3159: summari
3160: SymbolicTensor
3161: update
3162:  verify
3163: .CopyFrom
3164: =shape
3165: allow
3166: hs
3167: if
3168: .in
3169:  comple
3170:  float
3171: reduce
3172:  imm
3173:  immut
3174:  immutable
3175: )"
3176:  leng
3177:  length
3178: dims
3179:  dl
3180:  DL
3181:  DLPack
3182: .ref
3183: .Array
3184: .ArrayL
3185: .ArrayLi
3186: .ArrayLike
3187: sen
3188: sitive
3189: dat
3190: datat
3191: datatype
3192:  Unlike
3193:  doing
3194:  Consider
3195: iding
3196:  remote
3197:  maybe
3198:  executes
3199:  tw
3200:  Mark
3201:  rather
3202: av
3203: Num
3204:  elements
3205: .num
3206: method
3207:  Creates
3208: ecord
3209:  tape
3210: .TensorShape
3211: inition
3212:  definition
3213: Use
3214:  backed
3215:  gpu
3216: fies
3217: GPU
3218:  /
3219:  consumer
3220:  converti
3221:  convertible
3222:  placeh
3223:  placeholder
3224:  api
3225:  though
3226:  got
3227: .resource
3228:  range
3229: [i
3230: "b
3231: "but
3232: }-
3233: pag
3234:                          
3235: -argument
3236: _result
3237: 18
3238: 78
3239:  Fix
3240: [

3241:  ref
3242:  enume
3243:  enumerate
3244: =n
3245: =as
3246: =values
3247:  Otherwise
3248:  converted
3249: ques
3250: quested
3251: !r
3252:  respective
3253: .comp
3254: .compile
3255: .]
3256: .][
3257: _SC
3258: _SCO
3259: _SCOPE
3260:  flat
3261:  lists
3262:  wrap
3263:  wrapped
3264: (sky
3265: (skyew
3266: (skyewm
3267: apply
3268: constru
3269:                                         
3270: _Set
3271: _Add
3272: .Ser
3273: .Seri
3274: .Serialize
3275: .SerializeTo
3276: .SerializeToString
3277:  conven
3278:  conveni
3279: _Finish
3280: bjects
3281: )`
3282: Mat
3283: MatM
3284: MatMul
3285: _.\\-
3286: _.\\-/
3287: _.\\-/]*
3288: points
3289: base
3290: -typed
3291:  asso
3292:  associ
3293:  describes
3294:  incomp
3295:  incompatible
3296: "Argument
3297: )}.")

3298:  >=
3299: tems
3300:  '%
3301: _I
3302: _Import
3303: _ImportGraphDef
3304: itializ
3305:  Gradient
3306: ass
3307:  evaluating
3308:  unne
3309:  unnecess
3310: bytes
3311:  groups
3312:  own
3313: RE
3314:  id
3315: ments
3316:  members
3317:  relevant
3318:  colocated
3319:  Each
3320: .h
3321: (num
3322: (compat
3323: )))


3324:  update
3325:  Reset
3326: dge
3327: ee
3328: .Operation
3329: }'
3330: ".
3331: (buf
3332:             
3333: (data
3334: _bu
3335: _buffer
3336: =wr
3337: =wrong
3338: -co
3339: -count
3340: Par
3341: _OperationGetAttr
3342:  experimental
3343:  info
3344: _PR
3345: _PROD
3346: _PRODU
3347: _PRODUCT
3348: SET
3349: disable
3350: Session
3351: ()`,
3352: gisterGradient
3353:  registering
3354: sub
3355: Registers
3356: NotDi
3357: NotDiff
3358: NotDifferentiable
3359: NoGradient
3360: Speci
3361: -defined
3362: 46
3363:  hold
3364:  require
3365:  parame
3366:  forward
3367:  calc
3368:  calcul
3369:  OpStatsType
3370:  running
3371:  allows
3372: tal
3373:  guide
3374:  coun
3375: tric
3376: doohickey
3377:  retrie
3378:  slas
3379:  slash
3380: [:-
3381: (resource
3382: deprecated
3383:  Define
3384:  note
3385:  external
3386:  synchroniz
3387:  large
3388:  related
3389: .GraphKeys
3390: .GLOBAL
3391: cts
3392: via
3393:  acces
3394: -e
3395:  warning
3396:  mutate
3397: .create
3398:  necessary
3399:  modify
3400: fication
3401: .Group
3402: .GroupLock
3403:  choo
3404: .x
3405: (),

3406:  Default
3407:  alterna
3408:  alternative
3409: .VersionDef
3410: VERS
3411: _CON
3412: !

3413: unfeedable
3414:  optimizers
3415:  actual
3416:  outside
3417: /"
3418: _loss
3419:  built
3420:  manually
3421:  vis
3422:  priority
3423: priority
3424:  step
3425: mb
3426: mbd
3427: mbda
3428: apt
3429:  composed
3430:  initialization
3431:  initializer
3432: .



3433: (creator
3434:  guard
3435:  again
3436:  exiting
3437:  modified
3438: /graph
3439: inaliz
3440: -only
3441: .train
3442:  envi
3443:  environ
3444:  environment
3445:  En
3446: .gradient
3447: .com
3448: _doc
3449: _docs
3450:  inferred
3451:  too
3452: ["_
3453: "].
3454: .signature
3455:  appen
3456: cond
3457:                                            
3458: ["
3459: est
3460:  indicating
3461: remove
3462:  Most
3463:  base
3464:  generated
3465:  conflic
3466:  conflicts
3467:  assignment
3468:  overhe
3469:  overhead
3470:  '/'
3471: .unique
3472: mutation
3473: (re
3474: =compute
3475: round
3476:  appe
3477:  appear
3478: _devices
3479:  concurrent
3480:  concurrently
3481:  Can
3482:  err
3483:  similar
3484:  Names
3485: ():`
3486: -exception
3487: uplic
3488:  regex
3489: (scope
3490: (item
3491: _keys
3492:  pushes
3493:  life
3494:  lifetime
3495: solu
3496: solute
3497:  weights
3498:  biases
3499: =scope
3500:  install
3501: cording
3502: ules
3503:  cha
3504:  chara
3505:  charac
3506:  "/"

3507: bugging
3508:  runtime
3509:  know
3510: cre
3511: _enclosing
3512:  applies
3513: Try
3514: Trying
3515:  spec
3516:  matmul
3517:  rec
3518:  recent
3519:  prior
3520: .queue
3521: .F
3522: .FIFO
3523: .FIFOQueue
3524:  norm
3525:  start
3526: ism
3527: seen
3528: _nodes
3529:  attempts
3530:  track
3531:  point
3532: IG
3533: IGH
3534: IGHT
3535:  trigger
3536:  direct
3537:  Resource
3538:  ResourceVariable
3539: EXPE
3540: EXPERI
3541: EXPERIMENT
3542: EXPERIMENTAL
3543: ({"_
3544:               
3545:  sele
3546: .kernel
3547: "}):

3548:  override
3549: Square
3550: .square
3551: _deps
3552: _controllers
3553: _distribute
3554:  comb
3555:  combined
3556: /execu
3557:  optional
3558:  ful
3559:  fully
3560: ask
3561: :f
3562: :foo
3563: :gpu
3564: .assert
3565: _equal
3566: )),
3567:  referen
3568:  references
3569: operation
3570: sess
3571: [Graph
3572: reset
3573: -flow
3574:  preser
3575:  sile
3576:  silent
3577:  silently
3578:  Example
3579: Enables
3580:  options
3581:  copies
3582: _FOR
3583:  changes
3584:  To
3585: (original
3586:  validate
3587: MODEL
3588:  mach
3589: SUMM
3590: ERS
3591: art
3592: _runner
3593: OV
3594: OVING
3595: _AVE
3596: _AVERA
3597: _AVERAGE
3598:  keep
3599: SSES
3600: ulari
3601: ularization
3602:  Variable
3603:  GLOBAL
3604: _INIT
3605: aver
3606: _RESOURCE
3607: ARY
3608: Initialize
3609: .Me
3610: .Message
3611: _exit
3612:  fn
3613:  semantics
3614: .OFF
3615: .ALL
3616: .SAFE
3617: _promo
3618: .LEGACY
3619:  Copy
3620: 201
3621:  Unless
3622:  wr
3623:  COND
3624:  K
3625:  impli
3626: mit
3627:  Sequence
3628:  AnyStr
3629:  app
3630:  goo
3631: gle
3632: .protobuf
3633: _tensorflow
3634:  iss
3635:  issue
3636:  issues
3637: ,g
3638: ,unused
3639: lient
3640: .ops
3641: profiler
3642:  trace
3643: _trace
3644: .types
3645: _identity
3646: _args
3647: GraphType
3648: OpStatsType
3649: OperationType
3650: EagerTensorType
3651: 79
3652:  bug
3653: _oss
3654: orary
3655:  switches
3656: _USE
3657: enable
3658: /tf
3659: TY
3660: TYPES
3661: _INTERN
3662: ataType
3663: INTERN
3664: -speci
3665:  merg
3666: .Mer
3667: .Merge
3668: .MergeDevice
3669: .co
3670: _file
3671: ST
3672:  missing
3673: .merge
3674: .string
3675: .fast
3676: .sh
3677: ortc
3678: ortcut
3679: args
3680:  suppre
3681:  suppress
3682:  exceptions
3683:  uid
3684: _Py
3685:  bytes
3686:  scalars
3687:  python
3688: unpr
3689: unprint
3690: unprintable
3691:  "\
3692:  custom
3693: prefer
3694: _custom
3695: _summari
3696: _summariz
3697: _summarizer
3698: summarize
3699: .PyTensor
3700:  )


3701: _constant
3702:  callbacks
3703: .tensor
3704: Const
3705: voke
3706: 70
3707:  On
3708: -op
3709:  pat
3710: const
3711: .N
3712: .Native
3713: .NativeObject
3714: comple
3715: complex
3716: float
3717:  complex
3718: (np
3719: __()


3720: .size
3721: non
3722:  differently
3723:  themsel
3724:  themselves
3725: epcopy
3726:  memo
3727: dlpack
3728:  *,
3729:  max
3730:  ):

3731:  Unused
3732: -None
3733: hash
3734:  intern
3735: sensitive
3736:  models
3737:  ensure
3738:  tran
3739: (sle
3740: (slebe
3741: (slebedev
3742: CPU
3743:  hol
3744:  holding
3745:  `.
3746: sually
3747:  host
3748: ())
3749:  two
3750:  et
3751:  etc
3752: unting
3753: deally
3754: _elements
3755: override
3756: _no
3757: _nograd
3758: Copies
3759: itialized
3760:  Record
3761:  backpro
3762: (dre
3763: (dresult
3764:  dre
3765:  dresult
3766: .record
3767: efore
3768:  dec
3769:  decla
3770: .identity
3771:  placement
3772: "with
3773: }.")

3774: ev
3775: eval
3776: 're
3777: [dtypes
3778: _error
3779: _pre
3780: _prefix
3781: At
3782: .capture
3783:  So
3784:  Some
3785:  Return
3786:  subclass
3787:  mod
3788: 171
3789: ])
3790: msg
3791: "{
3792: }:
3793: )}")


3794:  Pro
3795: pagate
3796: (_):

3797: trace
3798: _hint
3799: 26
3800: 268
3801: 34
3802: 347
3803: 915
3804: =unused
3805:  mind
3806:  converting
3807:  preference
3808: IndexedSlices
3809: .Se
3810: .Sequence
3811: =preferred
3812:  mismat
3813:  mismatch
3814: )]]:

3815: Output
3816:  Di
3817:                                  
3818: opied
3819: _VALID
3820: "^
3821: "^[
3822: _.\\/
3823: _.\\/>
3824: _.\\/>-
3825: _.\\/>-]*
3826: _.\\/>-]*$
3827: traceback
3828: .fil
3829: .filter
3830:  flatten
3831:  handles
3832: reconstru
3833: reconstruct
3834: _New
3835:                                                
3836: _AddInput
3837:  dele
3838: use
3839: AttrValueProto
3840: StackT
3841: StackTrace
3842: (stack
3843: such
3844:  passing
3845: )`.

3846: classmethod
3847: [OperationType
3848:  OperationType
3849:  expression
3850:  ir
3851:  irre
3852:  irrelevant
3853: Tensors
3854:  endpoints
3855: .base
3856:  replica
3857:  replicated
3858:  <<
3859: 31
3860:  larger
3861: GB
3862: (md
3863: (mdan
3864: ::
3865: "`
3866:  FI
3867:  FIX
3868:  FIXME
3869: 22
3870: 225
3871:  shall
3872: .IndexedSlices
3873: =op
3874: =inputs
3875: (cls
3876:  inv
3877:  invoc
3878:  invocations
3879:  line
3880:  thre
3881:  three
3882:  Pass
3883: Ch
3884: Check
3885: .Add
3886: )]

3887: DE
3888: DEP
3889: DEPRE
3890: DEPRECATE
3891: DEPRECATED
3892: _ass
3893: _assign
3894: _assignments
3895: [traceable
3896: Code
3897:  filename
3898:  suppo
3899:  suppose
3900:  contained
3901:  lines
3902: 16
3903: _B
3904: ')


3905: .file
3906: .filename
3907: file
3908: .lineno
3909:  ...]
3910:  []


3911:  lea
3912: ')

3913:  }
3914:  }


3915: _OperationNum
3916: Up
3917: Update
3918:  Please
3919:  cached
3920: while
3921: See
3922: WhileInput
3923: WhileInputH
3924: WhileInputHack
3925:  helpful
3926: Inputs
3927:  goes
3928: .Set
3929: .Name
3930: .NameAttr
3931: .NameAttrList
3932: _names
3933:  funcs
3934: =funcs
3935: =shapes
3936: .Clear
3937:  fetch
3938: _Get
3939: _GetBuffer
3940: .Par
3941: .Parse
3942: .ParseFromString
3943: hi
3944: hich
3945: _int
3946: .experimental
3947: ullType
3948: .TFT
3949: _UN
3950: _UNSET
3951:  TFT
3952: :disable
3953: Runs
3954:  Call
3955:  Calling
3956:  nee
3957:  needed
3958: ched
3959:  maps
3960: _using
3961: 39
3962: 395
3963: represent
3964: representing
3965:  respe
3966:  respect
3967:  parti
3968: uming
3969:  `"
3970: Sub
3971: .RegisterGradient
3972: (unused
3973: gative
3974: call
3975: @deprecation
3976: no
3977: Specifies
3978:  differentiable
3979: "."""

3980:  including
3981:  parameters
3982:  FLO
3983:  FLOP
3984:  inference
3985:  usage
3986: gisterS
3987: gisterSta
3988: gisterStati
3989: gisterStatistic
3990: gisterStatistics
3991:  gives
3992:  form
3993: -known
3994:  hap
3995:  happen
3996: point
3997:  total
3998: tency
3999:  yo
4000:  your
4001:  counted
4002:  bas
4003:  basis
4004: cap
4005:  retrieve
4006: 'll
4007:  comma
4008: (statistic
4009: stats
4010:  associated
4011:  identify
4012:  stats
4013:  min
4014: _M
4015: UT
4016: UTATION
4017: SION
4018:  Graphs
4019:  units
4020:  recom
4021:  recommen
4022:  recommended
4023:  classes
4024:  Import
4025:  synchronization
4026: rb
4027: rbit
4028: rbitrary
4029:  convenience
4030:  store
4031:  via
4032:  accessor
4033:  accessors
4034:  programs
4035:  guara
4036:  guaran
4037:  guarante
4038:  reported
4039:  ille
4040:  illeg
4041:  illegal
4042:  going
4043:  wait
4044:  until
4045:  Functions
4046:  choose
4047:  union
4048:  rand
4049:  random
4050: =versions
4051: _DE
4052: _DEF
4053: _VERS
4054: _VERSION
4055:  St
4056:  dan
4057:  dange
4058:  dangero
4059:  dangerous
4060: ders
4061:  Al
4062:  behave
4063:  redu
4064:  reduction
4065:  Automatic
4066:  AutomaticControlDependencies
4067:  Cache
4068:  protobufs
4069: reduced
4070:  pair
4071:  pairs
4072:  tuples
4073:  {}


4074: ulate
4075:  fro
4076:  froz
4077:  frozen
4078:  ready
4079:  visi
4080:  visibility
4081: Scope
4082: .variable
4083:  Creator
4084:  Creators
4085:  high
4086:  higher
4087:  With
4088:  side
4089:  properly
4090:  kee
4091:  keeps
4092:  initializes
4093: (old
4094:  later
4095: istration
4096: sort
4097: lambda
4098: gether
4099: `.



4100:  signature
4101:  register
4102: ]]],

4103: [tuple
4104:  []
4105:  against
4106: dent
4107:  say
4108: .QueueRunner
4109:  Unf
4110:  Unfinaliz
4111:  Unfinalizing
4112: act
4113:  starting
4114: _bytesize
4115: If
4116: .cached
4117: _definition
4118: ])


4119: using
4120: .import
4121: ithub
4122: /cc
4123: /index
4124: .md
4125:  had
4126:  adds
4127:  pybind
4128: ++,
4129: _GraphTo
4130: _GraphToGraphDef
4131:  iff
4132:  Both
4133:  rely
4134: sis
4135:  appended
4136: .input
4137: ateful
4138: ../
4139: /pybind
4140: Test
4141: cur
4142: Adds
4143: chil
4144: childre
4145: children
4146:  San
4147:  Sanity
4148: _GraphCopy
4149: _GraphCopyFunction
4150: [compat
4151: .min
4152: 12
4153:  found
4154: )]


4155:  Helper
4156:  low
4157:  consumes
4158: -is
4159:  mutates
4160:  ensu
4161:  ensures
4162:  mutating
4163: (ret
4164:  around
4165: _FinishWhile
4166:  ok
4167: .low
4168: .lower
4169:  requested
4170:  Do
4171:  overriding
4172: (map
4173: (mapped
4174: record
4175: _seen
4176:  metadata
4177: (colocation
4178: _stateful
4179: _operations
4180:  properti
4181:  properties
4182:  Create
4183:  informative
4184: ical
4185:  allowed
4186:  gi
4187:  give
4188:  nice
4189: plit
4190:  both
4191:  appears
4192: .bytes
4193:  looks
4194: \"<
4195: >:
4196: >:<
4197: >\"
4198: exist
4199:                     
4200:  Act
4201:  Actually
4202:  referr
4203:  referring
4204: _oper
4205: _Output
4206:  exi
4207:  exited
4208:  wish
4209: Stores
4210:  severa
4211:  several
4212:  treat
4213:  resulting
4214:  filtered
4215:  matches
4216:  Items
4217:  cho
4218:  choice
4219:  tok
4220:  token
4221:  tokens
4222:  filters
4223: Clears
4224:  hand
4225:  handler
4226:  annot
4227: thing
4228: era
4229:  maintains
4230: (...):
4231:  statement
4232:  onto
4233:  follows
4234:  capt
4235:  captured
4236: (...)
4237:  top
4238:  absolute
4239: _d
4240: (""
4241: (""):

4242:  overa
4243:  overall
4244: ')
4245: weights
4246: biases
4247: ffine
4248:  rules
4249:  Scope
4250:  Scopes
4251:  character
4252: "'
4253: "'{
4254:  pattern
4255:  {_
4256: .pattern
4257:  blocks
4258:  stru
4259:  struct
4260:  structured
4261:  sepa
4262: rated
4263:  debugging
4264:  display
4265: alization
4266:  marked
4267:  actually
4268:  "/"
4269: crement
4270: /scope
4271: .E
4272: GradientCo
4273: GradientColocation
4274:  lib
4275:  libra
4276:  librari
4277:  libraries
4278: **
4279: _colocate
4280: onger
4281:  fut
4282:  future
4283: _tmp
4284:  frame
4285:  layers
4286: _off
4287: _offset
4288:  document
4289:  documentation
4290: :GPU
4291: _gpu
4292: cpu
4293:  wrappers
4294:  released
4295:  beco
4296:  become
4297: _container
4298:  normally
4299:  mech
4300:  mechan
4301:  mechanism
4302:  indicate
4303:  Clear
4304: push
4305: pop
4306: current
4307: For
4308:  adding
4309:  prun
4310:  contexts
4311:  waiting
4312: (pred
4313: dependencies
4314:  ded
4315:  deduplic
4316: (handle
4317:  manual
4318: ridge
4319:  operators
4320: )}):

4321:  Ad
4322:  Additional
4323: ))
4324:  select
4325: Custom
4326: CustomSquare
4327: custom
4328: _square
4329:  ...


4330: Mark
4331: Marks
4332:  unf
4333: Make
4334:  affect
4335: _specs
4336: versed
4337: _traceable
4338: [_
4339:  comment
4340: .group
4341: /executed
4342:  consider
4343:  general
4344: /t
4345: /task
4346: (container
4347:  UID
4348: =ignore
4349: _signature
4350: )])

4351: .math
4352: (bi
4353: (bias
4354: bad
4355:  Error
4356:  Traceback
4357:  InvalidArgumentError
4358: 271
4359: 463
4360: 878
4361:  fav
4362:  favor
4363: ".


4364:  "`
4365: (session
4366: =sess
4367: ]):
4368: GetG
4369: GetGlobal
4370: GetGlobalDefaultGraph
4371: haps
4372:  hiding
4373: -block
4374: [[],
4375:  necessarily
4376:  live
4377: -building
4378:  often
4379:  Entering
4380:  entered
4381:  entry
4382:  pop
4383:  constructs
4384: .stop
4385: _recording
4386:  lifting
4387: oolean
4388: dic
4389: dicates
4390: .inside
4391:  provides
4392:  opposed
4393:  concre
4394:  concrete
4395:  startup
4396:  usable
4397:  configure
4398:  Po
4399:  Policy
4400:  controlling
4401:  releases
4402: _EX
4403: _EXP
4404: _EXPLI
4405: _EXPLIC
4406: _EXPLICIT
4407:  correct
4408: _W
4409: _WAR
4410: _WARN
4411: _INT
4412:  ones
4413:  dispat
4414:  SYNC
4415: ously
4416:  AS
4417: _ce
4418: _cell
4419: .vlo
4420: .vlog
4421: nab
4422: nabling
4423: .EA
4424: .EAGE
4425: .EAGER
4426: =config
4427: =device
4428: =execution
4429: Dis
4430: _safe
4431: Ser
4432: _has
4433: _be
4434: _been
4435:  policy
4436:  unnecessary
4437: (main
4438:  migrate
4439: -related
4440:  rewrite
4441: mig
4442: migration
4443: /gu
4444: /guide
4445: /m
4446: /migrate
4447:  Assertion
4448:  AssertionError
4449:  due
4450: 55
4451: .r
4452: .rstr
4453: .rstrip
4454: ("/
4455: ("/")

4456: -value
4457: -valued
4458: GLOBAL
4459:  acro
4460:  across
4461: mode
4462: model
4463: TRAINABLE
4464:  machine
4465:  trained
4466: ARI
4467: ARIES
4468:  summary
4469: QUE
4470: QUEUE
4471: _RUNN
4472: _RUNNERS
4473: _runners
4474:  moving
4475:  avera
4476:  averages
4477: moving
4478: _avera
4479: _average
4480: GU
4481: GULA
4482: GULARI
4483: GULARIZ
4484: GULARIZATION
4485: _LOSSES
4486:  regularization
4487: EIGHT
4488: EIGHTS
4489: IA
4490: IASES
4491: CTI
4492: CTIVA
4493: CTIVATIONS
4494:  ME
4495:  MET
4496:  METRI
4497:  METRIC
4498:  MODE
4499:  MODEL
4500: trainable
4501:  SUMM
4502: table
4503:  asset
4504: paths
4505:  MOVING
4506: atena
4507: atenated
4508: arded
4509:  CONCATE
4510:  CONCATEN
4511:  CONCATENATE
4512:  CONCATENATED
4513:  SA
4514: tiv
4515: tivations
4516: aveable
4517: _init
4518:  REA
4519:  READ
4520:  READY
4521: _STE
4522: _STEP
4523: _step
4524:  count
4525: _CONTE
4526: _CONTEX
4527: _CONTEXT
4528: SUMMARY
4529: _CO
4530: _COL
4531: _COLLE
4532: _COLLEC
4533: orts
4534: antle
4535:  EagerVariable
4536:  EagerVariableStore
4537:  part
4538:  templ
4539:  template
4540: *`
4541:  Speci
4542: Start
4543: `:


4544: /Add
4545: /a
4546:  auto
4547: restore
4548: state
4549: /,
4550: export
4551: "([
4552: "([\
4553: "([\^
4554: "([\^]
4555: "([\^]|
4556: :@|
4557: :@|^
4558: (.*
4559: (.*)
4560: (.*)"

4561: .sub
4562: (str
4563: "\
4564: .warning
4565:  Function
4566:  implements
4567: message
4568:  cir
4569:  circ
4570:  circular
4571: .Function
4572: .FunctionType
4573:  raw
4574:  Raw
4575: (fn
4576: correspon
4577: corresponding
4578: .number
4579: [input
4580:  OFF
4581:  LEGACY
4582:  ALL
4583:  SAFE
4584: �
4585: "The
4586: promo
4587:  slicing
4588:  ints
4589: =ints
4590:  Copyr
4591:  Copyright
4592:  Aut
4593:  Auth
4594:  Author
4595:  Authors
4596:  Rights
4597:  Reser
4598:  Reserved
4599:  Licensed
4600:  Apache
4601:  Version
4602: Licen
4603: License
4604: ");

4605:  compli
4606:  compliance
4607:  htt
4608:  http
4609: .ap
4610: .apache
4611: /lic
4612: /licen
4613: /licenses
4614: /LI
4615: /LICE
4616: /LICEN
4617: /LICENSE
4618:  applic
4619:  applicable
4620:  law
4621:  agre
4622:  agreed
4623:  writing
4624:  softw
4625:  software
4626:  IS
4627:  BAS
4628:  BASI
4629:  BASIS
4630:  WIT
4631:  WITH
4632:  WITHOU
4633:  WITHOUT
4634:  WAR
4635:  WARRA
4636:  WARRANT
4637:  WARRANTI
4638:  WARRANTIES
4639:  OR
4640:  CONDI
4641:  CONDITIONS
4642:  OF
4643:  AN
4644:  ANY
4645:  KIN
4646:  KIND
4647:  express
4648:  implied
4649:  lang
4650:  langu
4651:  language
4652:  gover
4653:  governing
4654:  perm
4655:  permis
4656:  permission
4657:  permissions
4658:  limit
4659:  limitations
4660:  =================================
4661:  =================================================================
4662:  =========================================================================
4663:  =============================================================================
4664:  ==============================================================================
4665:  ==============================================================================

4666: Classes
4667: .ab
4668: .abc
4669:  contextlib
4670:  sys
4671:  abs
4672:  absl
4673:  google
4674: 143
4675: 110
4676: 113
4677: .client
4678: .plat
4679: .platform
4680: _logging
4681: .profiler
4682:  profiler
4683: .deprecation
4684: ="_
4685: 307
4686: 794
4687: 93
4688: 935
4689:  fix
4690:  fixed
4691:  Up
4692:  Upd
4693:  Updated
4694:  copyb
4695:  copybara
4696:  Te
4697:  Temp
4698:  Temporary
4699:  deter
4700:  determin
4701:  determining
4702: -pro
4703: -prog
4704: -progre
4705: -progress
4706: _API
4707: _SH
4708: _SHA
4709: _SHAPES
4710: /ops
4711: /enable
4712: _DTYPES
4713: [types
4714: .DataType
4715:  identifi
4716:  identifier
4717: -specified
4718:  merged
4719: _filename
4720: _first
4721: _firstlineno
4722: unknown
4723: <%
4724: (ta
4725: (tay
4726: (tayl
4727: (taylor
4728: (taylorro
4729: (taylorrobi
4730: (taylorrobie
4731:  MU
4732:  MUST
4733:  signa
4734:  signals
4735:  callers
4736:  safely
4737:  null
4738:  merges
4739: -tri
4740: -trivi
4741: -trivial
4742:  cost
4743: .shortcut
4744: )))



4745: ]):


4746: Convert
4747:  Object
4748: (con
4749: (conv
4750:  legacy
4751:  pur
4752:  purpo
4753:  purposes
4754: _den
4755: _dense
4756: _like
4757: within
4758: _UID
4759: Hum
4760: Human
4761:  readable
4762: .issc
4763: .isscal
4764: .isscalar
4765: >"

4766: Either
4767:  Custom
4768:  compon
4769:  components
4770:  Control
4771:  Controls
4772:  style
4773: /ver
4774: /verbo
4775: /verbosi
4776: /verbosity
4777:  formatted
4778:  fri
4779:  friend
4780: =is
4781: __

4782: .make
4783: =verify
4784: =allow
4785: =tensor
4786:  {"
4787: }

4788:  [],
4789: =attrs
4790: .should
4791: _invoke
4792: 147
4793: 670
4794: 703
4795:  Once
4796:  paths
4797:  unified
4798: .invoke
4799: ,),
4800: .Value
4801: ()).__
4802: nonzero
4803: __


4804:  behaves
4805: >".__
4806: (),)


4807: deepcopy
4808: (%
4809:  dimen
4810:  dimension
4811: .ndims
4812: Scalar
4813: ()`")

4814: ()[
4815: .array
4816: _To
4817: _ToD
4818: _ToDlpack
4819: _ToDlpackC
4820: _ToDlpackCap
4821: _ToDlpackCapsu
4822: _ToDlpackCapsule
4823: _Dlpack
4824: _DlpackDevice
4825:  hash
4826:  hashable
4827:  unhash
4828:  unhashable
4829: Instead
4830: -sensitive
4831: [self
4832: ()]
4833:  arrays
4834:  safety
4835:  readonly
4836:  view
4837: .asarray
4838: (memoryview
4839: =int
4840: -copy
4841:  trans
4842:  transferred
4843:  avoiding
4844: -CPU
4845: (may
4846: (maybe
4847:  backing
4848: backing
4849:  usually
4850:  produced
4851:  avoids
4852:  Marked
4853:  pers
4854:  perspective
4855:  better
4856:  getting
4857:  expo
4858:  exposing
4859:  he
4860:  heav
4861:  heaven
4862:  forbi
4863:  forbid
4864: !).
4865:  Punting
4866:  ideally
4867:  thing
4868:  things
4869: ran
4870: rank
4871: Integer
4872:  Integer
4873: Number
4874:  Long
4875: static
4876: staticmethod
4877: _operator
4878:  setattr
4879: .en
4880: .ensure
4881: _initialized
4882: (ct
4883: (ctx
4884:  backprop
4885: =access
4886: -mem
4887: -member
4888: -before
4889: -def
4890: -definition
4891:  declared
4892: Ali
4893: Alias
4894:  cpu
4895:  Identi
4896:  Identifies
4897: -memory
4898: (gpu
4899:  Me
4900:  Method
4901:  Methods
4902:  consumers
4903: .consumer
4904: .consumers
4905:  looking
4906: ?")


4907: Attemp
4908: Attempting
4909:  capture
4910: .",

4911: capture
4912: _const
4913: Capture
4914:  registers
4915:  modu
4916:  module
4917:  exposed
4918: 08
4919: 081
4920: 05
4921: 052
4922:  cove
4923:  covered
4924: =[])
4925: =[])(

4926: _In
4927: _Init
4928: _InitEagerTensor
4929: (msg
4930:  msg
4931: }"
4932: }"



4933: ().


4934: "tensor
4935: "tensors
4936: ]._
4937: (len
4938: "F
4939: "Found
4940: )}.")


4941:  Propagate
4942: .pack
4943: Comp
4944: Computing
4945: packed
4946: @profiler
4947: .trace
4948: _wrap
4949: _wrapper
4950: =(
4951: ,),

4952: Implement
4953: Implementation
4954: 142
4955: 518
4956: 781
4957: -site
4958: -sites
4959:  ...,
4960: ]]:
4961:  Pre
4962:  Prese
4963:  Present
4964: =value
4965: "Requested
4966: =(

4967: ``,
4968: .to
4969:  Dictionary
4970: [k
4971:  Copied
4972: /node
4973: .cc
4974: ,jo
4975: ,jos
4976: ,josh
4977:  Conso
4978:  Consoli
4979:  Consolidate
4980:  validation
4981: _.\\/>-]*$")

4982: _.\\/>-]*$")



4983: @traceback
4984:  flattened
4985:  grouping
4986:  looked
4987: *.

4988: _library
4989: .apply
4990:  flattens
4991:  incom
4992:  incoming
4993:  Ref
4994:  Refac
4995:  Refactor
4996: _NewOperation
4997: _SetDevice
4998: _AddInputList
4999:                                        

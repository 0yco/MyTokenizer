256:   
257:     
258: on
259:  t
260:    
261: or
262: in
263: de
264: 
   
265: se
266: pe
267: te
268: re
269: 
    
270:  a
271: ra
272: ti
273:  c
274:  th
275: is
276: me
277: 
 
278: tion
279: na
280: le
281:  o
282: al
283: st
284: 
     
285:  the
286: en
287: ce
288: ro
289: name
290: er
291: ""
292:  f
293: sel
294: self
295: def
296: rap
297:  `
298:  i
299:  in
300: at
301: sor
302: raph
303:  e
304: un
305: ype
306: ur
307:  re
308:  =
309: ut
310:  #
311:  w
312:  n
313: ._
314:  g
315: ing
316: th
317:  b
318:  is
319: ction
320: co
321: lo
322: ac
323:  s
324:  p
325: ue
326:  con
327:  to
328: tur
329: turn
330:  T
331: ensor
332:  self
333: 

 
334: ble
335: mp
336: one
337:         
338: 
       
339: ul
340: type
341:  no
342:  an
343: """
344: None
345:  d
346:  m
347:  if
348:  def
349: an
350: alue
351: vi
352: unction
353: xt
354: ack
355:  name
356: ss
357: op
358: put
359: ()
360: ted
361: tr
362:  of
363:  "
364: con
365: text
366: able
367: vice
368:  return
369:  wi
370:  op
371: device
372: 

   
373: ec
374:  """
375: ar
376:  for
377:  A
378:  co
379:  be
380: ed
381: ger
382:  not
383: pera
384: cope
385: peration
386: es
387: stack
388:  -
389:  ex
390: li
391:  graph
392: rea
393: ha
394: value
395:  ->
396: ult
397:  _
398: nt
399:  None
400: str
401: tro
402: trol
403: loc
404: ist
405: ror
406: ault
407:  Th
408: to
409: ):
410: tf
411: graph
412:  u
413:  with
414:  and
415: ly
416: et
417: pro
418:  that
419: 
        
420: Er
421: Error
422: bj
423: Tensor
424: rom
425: ter
426:  tensor
427: ver
428:  py
429: puts
430: ll
431:  context
432: low
433: ion
434: ci
435: Re
436:  as
437: function
438:  (
439: ten
440: di
441: ise
442:  use
443:  l
444: int
445: ode
446: ager
447:  function
448:  I
449: scope
450:  this
451: tensor
452: lle
453: ex
454: ttr
455:  or
456:  ma
457: as
458: ation
459: Operation
460: rg
461:  device
462: ort
463: el
464: 
         
465: ch
466:  The
467: pen
468: ts
469: Graph
470: Return
471:  ra
472:  wh
473:  value
474: 
            
475:  pyl
476:  pylint
477: ment
478: ")
479: ve
480: hape
481: llection
482: cted
483: bjec
484: ate
485: den
486: `.
487:  list
488: set
489:  str
490:  raise
491:  tf
492: ty
493: De
494:  dis
495: stan
496: ig
497: py
498: cess
499: per
500: read
501: Returns
502: ey
503: ecu
504: ma
505: context
506:  ne
507:  scope
508:  attr
509:  de
510: up
511: Value
512: ..
513:  default
514: bu
515: nager
516:  control
517:  disable
518: control
519: la
520:  are
521:  pro
522: attr
523: penden
524: Op
525: flow
526: ("
527: ct
528: ent
529:  cal
530: ari
531: default
532: ali
533: 


534: __
535: radi
536:  If
537: pendenci
538: pendencies
539: ssion
540:  will
541:  ha
542:  objec
543:  on
544: access
545:  it
546: ore
547: prote
548: protected
549:  N
550:  F
551:  crea
552: Def
553: ta
554: dd
555:  type
556:  @
557:  operation
558: it
559: get
560: radient
561:  comp
562: red
563:  v
564: location
565: shape
566: ariable
567: si
568:  dtype
569:  execu
570: inputs
571: mport
572: thon
573:  Arg
574:  Args
575: so
576: nable
577: reat
578: fi
579:  used
580: ati
581:  R
582:  collection
583: oo
584:  This
585: dtype
586:  S
587:  from
588:  C
589: session
590: out
591: ere
592: ry
593: stance
594: ri
595:  new
596:  h
597:  el
598:  else
599:  Tensor
600:  string
601: 
                    
602: local
603: from
604:  me
605:  Value
606:  inputs
607: ibu
608: ==
609:  %
610: ))
611: sion
612: tional
613: comp
614: il
615:  ValueError
616: reator
617:  by
618: gis
619: lic
620: ust
621:  enable
622:  Returns
623:  al
624: urce
625: tain
626: um
627: python
628: race
629:  do
630:  [
631: mple
632:  whi
633: ]:
634:  get
635:  can
636: ."""
637: lib
638: rue
639: `,
640: source
641: pre
642:  import
643: version
644:  di
645:  st
646: ot
647: sed
648: cep
649:  Type
650: ou
651: ith
652: pb
653:  node
654:  __
655: unc
656: key
657:  input
658: thread
659:  un
660: Optional
661: and
662: instance
663:  which
664: dependencies
665: tic
666: peci
667:  ops
668: ibute
669: aliz
670:  created
671:  Operation
672: port
673: rent
674: map
675:  stack
676: Type
677:  eager
678: urrent
679:  y
680: eager
681: ",
682:  call
683: __(
684: ff
685:  TypeError
686:  manager
687: ge
688: ata
689: mo
690:  isinstance
691: obj
692: iv
693: Eager
694: ding
695: iel
696: ield
697:  ``
698:  ```
699: Key
700: for
701: LE
702:  execution
703:  try
704: 
           
705: ...
706:  objects
707: run
708: inal
709:  speci
710: proto
711: alse
712: creator
713:  must
714: Con
715: ).
716: ser
717: qu
718:  tensorflow
719: ler
720: lement
721:  {
722:  when
723: mode
724:  P
725:  have
726: andle
727: terna
728: uld
729:  all
730: .")
731: lass
732:  sa
733: ke
734: ():
735:  has
736: perty
737:  current
738: ap
739: wrap
740: vert
741: od
742: list
743: collection
744:  excep
745:  so
746: all
747:  object
748: ther
749:  values
750: ument
751: raceable
752: ternal
753:  we
754:  Ra
755:  out
756: input
757:  giv
758:  thread
759: EagerTensor
760: ase
761: ould
762: thod
763: 's
764: ined
765: ises
766:  set
767:  se
768:  For
769: ample
770:  proto
771: types
772: with
773:  does
774:  Raises
775:  pre
776:  given
777: til
778: St
779: AB
780: ABLE
781:  tensors
782: olic
783: ])
784:  arg
785: ded
786:  Key
787: bel
788:  may
789:  specifi
790: ump
791:  pywrap
792: lock
793:  *
794:  +
795:  example
796:  contain
797: stic
798:  except
799:  U
800: umpy
801: osi
802: node
803:  method
804: TF
805:  shape
806:  operations
807: VA
808:  gradient
809: stru
810: alid
811: util
812: osite
813: manager
814: add
815:  attribute
816: iginal
817:  Graph
818: atistic
819: colocation
820: gradient
821:  add
822: RI
823: ner
824: der
825: ad
826: data
827: OD
828: sing
829: property
830: ach
831:  No
832: try
833:  bu
834: lif
835: func
836: tes
837: ms
838: mb
839:  )
840:  mode
841:  but
842:  names
843:  Se
844: ====
845:  regis
846: arg
847: pli
848:  ...
849:  '
850:  TF
851:  constru
852: export
853: ary
854: pec
855:  ==
856: roup
857: ork
858: compat
859:  sup
860:  allow
861: alized
862:  variable
863:  compu
864:  colocation
865:  collections
866: ated
867:  sh
868: led
869: string
870: bi
871: mat
872: stant
873: Attr
874: ().
875: operation
876: resource
877: 
             
878: ic
879:  la
880: ool
881:  su
882: fer
883: ol
884: ker
885: kern
886: kernel
887:  In
888:  resource
889:  argument
890: .)
891: rate
892: sert
893: variable
894:  ap
895: back
896:  True
897: sa
898:  called
899: que
900: element
901: ":
902: copy
903: time
904: su
905:  ct
906:  ctx
907: uting
908: values
909: by
910: opy
911:  en
912: rame
913: sult
914: ()`
915: False
916: ),
917: In
918:  one
919: Co
920: ard
921:  dependencies
922: isting
923: ps
924: VARI
925: VARIABLE
926: romo
927: lob
928: lobal
929: execu
930:  elif
931: ally
932:  only
933:  ac
934: .__
935: ],
936: ref
937:  key
938: 't
939: ecuting
940:  returned
941:  run
942: VARIABLES
943:  L
944:  W
945: id
946: ops
947:  should
948: TE
949:  ch
950:  pa
951: numpy
952: not
953:  1
954:  types
955: fig
956: init
957: dex
958: uple
959:  EagerTensor
960: True
961: >>
962:  more
963:  enabled
964: ilding
965: mpty
966: bili
967: bility
968: tered
969: locate
970:  ad
971: ested
972:  ou
973:  outer
974: work
975: error
976: prec
977: execution
978:  other
979: AttrValue
980: 

     
981: output
982:  session
983: Comp
984: oc
985:  map
986:  any
987:  colle
988:  functions
989:  An
990: frame
991: framework
992: bject
993:  func
994: prese
995:  code
996: us
997: iti
998: ine
999: =[
1000: handle
1001: atibility
1002: Composite
1003: CompositeTensor
1004:  original
1005:  you
1006: ile
1007:  See
1008: tor
1009:  Con
1010: cor
1011:  internal
1012: class
1013: dis
1014: eck
1015: pr
1016: present
1017: ymb
1018: ymbolic
1019: constant
1020:  class
1021: spec
1022:  Run
1023:  Runtime
1024:  RuntimeError
1025: tive
1026: 
                        
1027: odeDef
1028: ME
1029:  specified
1030:  been
1031:  compute
1032: label
1033: ved
1034: gistry
1035:  lo
1036:  False
1037:  result
1038: reate
1039:  same
1040:  create
1041: convert
1042: eren
1043: pend
1044: ctionary
1045: res
1046: group
1047:  statistic
1048: Variable
1049: side
1050: contain
1051: container
1052: CE
1053: IN
1054:  Optional
1055: ir
1056:  handle
1057: contextlib
1058: PI
1059:  bool
1060: he
1061:  "_
1062: gra
1063:  using
1064: rect
1065: ([
1066:  returns
1067:  output
1068: ant
1069: eagerly
1070: lace
1071:  registered
1072: Control
1073:  dictionary
1074: shapes
1075:  yield
1076:  ig
1077:  ign
1078:  collect
1079:  Re
1080: ping
1081: ="
1082:  TOD
1083:  TODO
1084:  API
1085: ow
1086: fe
1087: exit
1088:  represent
1089:  te
1090: ze
1091: ew
1092:  its
1093: functions
1094:  strings
1095: existing
1096:  copy
1097: ON
1098:  per
1099: ssa
1100: ull
1101: used
1102: conversion
1103: fter
1104: DType
1105: ique
1106:  M
1107:  case
1108: use
1109:  man
1110:  element
1111:  le
1112: sc
1113: ulti
1114:  here
1115: ste
1116: ferred
1117: verri
1118: executing
1119:  []
1120: ffer
1121:  constructed
1122: names
1123:  added
1124: AL
1125: gy
1126: inner
1127: ses
1128:  Ite
1129:  ab
1130:  error
1131: ultip
1132: fy
1133: PU
1134: men
1135: cit
1136:                 
1137:  within
1138: GraphDef
1139:  cor
1140: pon
1141: ign
1142: ."
1143:  KeyError
1144: fin
1145: doc
1146: rategy
1147:  Promo
1148:  PromoM
1149:  PromoMode
1150:  at
1151: ence
1152: tensorflow
1153: valid
1154:  dtypes
1155:  traceable
1156: form
1157: ats
1158: move
1159:  "/
1160: ip
1161:  without
1162:  pass
1163:  obj
1164:  convert
1165: like
1166:  int
1167: Py
1168: ite
1169: ())
1170: defined
1171: outer
1172: stead
1173:  expli
1174:  explicit
1175:  place
1176: tensors
1177:  empty
1178:  ret
1179: OpDef
1180: ful
1181: respon
1182:  assert
1183:  state
1184:  label
1185:  nested
1186:  container
1187: strategy
1188: olicy
1189: ========
1190: rator
1191:  NoReturn
1192: orted
1193: registry
1194: precated
1195: Object
1196: po
1197:  multip
1198:  diff
1199: index
1200: date
1201: create
1202: outputs
1203:  tuple
1204: ces
1205:  instead
1206:  data
1207:  variables
1208: feren
1209:  conversion
1210: Stack
1211:  executed
1212: Traceable
1213:  {}
1214:  each
1215: "])
1216: LO
1217: contextmanager
1218: collections
1219:  creator
1220: "):
1221: distr
1222: qui
1223:  B
1224: NT
1225: ES
1226: import
1227:  Iterator
1228: ssage
1229: only
1230:  after
1231: wit
1232: witch
1233:  provi
1234:  callable
1235: Context
1236: repr
1237: ting
1238:  multiple
1239: ymbolicTensor
1240:  attrs
1241: ray
1242: mented
1243: rectly
1244:  G
1245: ong
1246:  defined
1247:  defin
1248:  initi
1249: sume
1250: val
1251: ure
1252:  being
1253: ind
1254: libra
1255: assed
1256:  correspon
1257: =["
1258: statistic
1259:  saved
1260: igh
1261: ww
1262:  Un
1263: RA
1264:  graphs
1265: allable
1266: quence
1267:  Any
1268: Ma
1269: buf
1270:  core
1271: api
1272: raceback
1273: merg
1274: merge
1275: code
1276: fn
1277: 
                
1278: mplemented
1279:  back
1280: The
1281:  would
1282: building
1283: Se
1284: append
1285:  mat
1286: NodeDef
1287:  valid
1288:  instance
1289:  field
1290:  ol
1291:  old
1292:  passed
1293: ils
1294:  ignore
1295: global
1296: most
1297: compatibility
1298:  2
1299:  TensorF
1300:  TensorFlow
1301:  requi
1302: ither
1303: ast
1304:  compat
1305: ported
1306:  unique
1307: utation
1308:  caller
1309:  many
1310:  text
1311:  differe
1312:  different
1313: dict
1314:  Note
1315: enum
1316: fet
1317: ay
1318:  doesn
1319:  hasattr
1320: 
                      
1321:  Attr
1322: ()`.
1323: ference
1324: OP
1325:  Py
1326:  Python
1327: library
1328:  fol
1329:  follow
1330:  ass
1331:  was
1332:  mapping
1333:  E
1334:  contains
1335:  final
1336:  finally
1337: ame
1338: lear
1339:  Op
1340:  also
1341:  mo
1342: finalized
1343:  colocate
1344:  exist
1345:  deta
1346:  details
1347: policy
1348: Manager
1349: vo
1350: 11
1351: und
1352: OTE
1353: ls
1354:  check
1355: (_
1356:  po
1357:  SymbolicTensor
1358:  Tensors
1359:  some
1360:  >>
1361:  >>>
1362:  tra
1363:  need
1364: verride
1365: pu
1366: ub
1367: ]]:
1368:  buffer
1369:  up
1370: ped
1371:  indi
1372:  uses
1373:  these
1374: original
1375: ODE
1376: assert
1377:  like
1378:  Foo
1379: Keys
1380:  under
1381:  O
1382: ION
1383:  Context
1384:  numpy
1385: core
1386:  config
1387:  NOTE
1388: ]):
1389:  ite
1390: om
1391: ents
1392: internal
1393: From
1394: (),
1395:  x
1396:  0
1397:  Not
1398:  len
1399:  D
1400:  export
1401:  kernel
1402:  than
1403: ark
1404: grad
1405:  ta
1406: eed
1407: ].
1408: )):
1409: ward
1410: GE
1411:  r
1412: ply
1413: Add
1414: ates
1415:  following
1416: colocate
1417: peri
1418: periment
1419:  execute
1420: gister
1421: GraphKeys
1422: state
1423: Default
1424: bind
1425: rapper
1426: return
1427: yield
1428:  specifies
1429:  controller
1430:  All
1431: //
1432: LI
1433:  either
1434: Str
1435: versions
1436: cord
1437:  global
1438: enter
1439: atible
1440: loat
1441:  EagerTensorType
1442: atus
1443: ception
1444:  NotI
1445:  NotImplemented
1446:  NotImplementedError
1447:  directly
1448:  into
1449: du
1450: ber
1451:  num
1452:  `_
1453: plied
1454:  feed
1455: fix
1456: ture
1457:  pack
1458:  preferred
1459:  where
1460: bytes
1461: RE
1462: Set
1463: alize
1464: kes
1465: Session
1466:  gen
1467:  gene
1468: groups
1469: we
1470: iz
1471:  building
1472: ous
1473: uto
1474:  inner
1475:  scopes
1476:  stan
1477:  stand
1478:  standard
1479: variables
1480: MENT
1481:  V
1482:  Y
1483: tt
1484:  required
1485: iting
1486:  np
1487: irst
1488: dev
1489: gg
1490: denti
1491:  k
1492: Stats
1493:  calls
1494:  supported
1495:  computation
1496:  such
1497:  We
1498: )))
1499: ssi
1500:  getattr
1501: umPy
1502: new
1503:  Eager
1504: dims
1505:  support
1506: 32
1507:  reg
1508: ular
1509: way
1510: reates
1511: fore
1512:  consume
1513: ok
1514:  expe
1515: ually
1516: radients
1517: ased
1518:  match
1519:  protoco
1520:  protocol
1521:  attributes
1522:  reference
1523:  desc
1524:  descri
1525: long
1526: locations
1527:  assign
1528:  property
1529: ('
1530: ".
1531: Get
1532: of
1533: Gradient
1534: "_
1535: old
1536:  si
1537: setter
1538: hared
1539: safe
1540:  provided
1541: ControlDe
1542: ControlDependencies
1543: Function
1544: controller
1545: (...
1546: LA
1547:  promo
1548:  file
1549: ://
1550: are
1551: ations
1552:  ContextManager
1553:  first
1554: call
1555: gging
1556:  lock
1557:  Remove
1558:  switch
1559: Device
1560: fied
1561: now
1562:  over
1563: ause
1564:  ti
1565:  time
1566:  possi
1567:  possible
1568:  progra
1569: item
1570:  NumPy
1571: end
1572: umm
1573: array
1574: format
1575:  beha
1576:  them
1577:  del
1578: tuple
1579:  order
1580:  ran
1581:  produ
1582:  H
1583:  pri
1584: vate
1585:  bet
1586: ven
1587:  alway
1588:  always
1589: num
1590: override
1591:  gra
1592:  grad
1593: 
               
1594:  It
1595: 
                     
1596:  gradients
1597:  pub
1598:  public
1599:  prefix
1600:  compatibility
1601: match
1602: NA
1603: 
                                    
1604: String
1605:       
1606: Arg
1607: Argument
1608: lev
1609:  calling
1610:  explicitly
1611:  flow
1612:  chan
1613: ating
1614:  outputs
1615:  active
1616: '):
1617: can
1618: experiment
1619: ges
1620: tering
1621:  statistics
1622: lu
1623:  Wh
1624: ince
1625: ity
1626:  Session
1627:  inside
1628:  proper
1629: ready
1630: line
1631: too
1632: pybind
1633: current
1634:  refer
1635: ush
1636:  currently
1637: ibution
1638:  innermost
1639: config
1640: `:
1641: ache
1642: OU
1643: TION
1644: ning
1645: tern
1646: ator
1647: utils
1648: precation
1649: enable
1650:  perform
1651: ecause
1652: stra
1653: wise
1654:  conver
1655: cal
1656: ustom
1657:  constant
1658:  block
1659: float
1660: Ex
1661: tent
1662: mor
1663: mory
1664:  GPU
1665: be
1666:  sing
1667: ord
1668:  undefined
1669: temp
1670:  sub
1671: gh
1672: )}
1673: rou
1674: ffec
1675:  backward
1676:  based
1677:  NodeDef
1678: 
                            
1679: items
1680:  group
1681: Input
1682: List
1683:  seri
1684:  serialized
1685:  creat
1686:  creating
1687: roto
1688: mul
1689:  computed
1690:  indic
1691: ints
1692: cy
1693:  Operations
1694:  existing
1695:  before
1696:  there
1697: TraceableObject
1698:  about
1699: ers
1700: king
1701: fo
1702:  par
1703:  correspond
1704:  yet
1705:  then
1706:  gu
1707:  shared
1708: ook
1709: [-
1710:  betwe
1711:  between
1712:  threads
1713: TraceableStack
1714: tim
1715: timiz
1716: uid
1717: matic
1718: pri
1719:  arguments
1720: check
1721: ](
1722: ttps
1723:  library
1724: naps
1725: napsh
1726: napshot
1727:  Name
1728:  executing
1729: candi
1730: candidate
1731: ControlDependenciesControl
1732: ControlDependenciesController
1733: distribution
1734: distribute
1735: EV
1736: EVI
1737: EVICE
1738: PLA
1739: PLACE
1740: PLACEMENT
1741: icen
1742: www
1743: org
1744: ================
1745:  construct
1746:  record
1747: callback
1748:  registry
1749: corator
1750: args
1751:  work
1752:  remo
1753: ga
1754: uge
1755:  dict
1756: Spec
1757: null
1758: inen
1759: ineno
1760: igna
1761:  sk
1762:  skip
1763:  because
1764: ail
1765:  program
1766: Copy
1767:  creation
1768: size
1769: len
1770: exception
1771:  content
1772: fety
1773:  single
1774:  number
1775: deprecated
1776: gpu
1777:  !
1778:  !=
1779:  supplied
1780:  Attribute
1781:  AttributeError
1782: ters
1783: vent
1784:  packed
1785: Can
1786: pa
1787: mplement
1788: ffect
1789: VALI
1790: VALID
1791: NAME
1792: REGE
1793: REGEX
1794: Za
1795: traceback
1796: Creates
1797: Proto
1798: message
1799:  takes
1800: 

       
1801:  representing
1802:  specify
1803: ',
1804:  corresponding
1805: An
1806: Any
1807:  assigned
1808:  abo
1809:  above
1810:  attemp
1811: ases
1812:  When
1813: just
1814:  Look
1815: ron
1816: LOB
1817: LOBAL
1818: ditional
1819:  fin
1820:  ""
1821: utomatic
1822:  initializ
1823: Callable
1824:  @_
1825: https
1826:  since
1827:  true
1828:        
1829: tadata
1830: pee
1831: peek
1832: vera
1833: ored
1834:  lif
1835: nested
1836: pop
1837:  my
1838: quare
1839: DefaultGraph
1840: none
1841: nonempty
1842: MODE
1843: RAIN
1844: ight
1845:  Licen
1846: IT
1847: las
1848: ab
1849:  Callable
1850:  ty
1851: attern
1852:  Union
1853: 14
1854:  composite
1855:  errors
1856:  decorator
1857:  deprecated
1858: ("_
1859: ound
1860: min
1861: object
1862:  user
1863: nown
1864:  "%
1865:  brea
1866:  break
1867: tri
1868: tions
1869:  read
1870: compatible
1871: calar
1872: yle
1873: summ
1874: cls
1875: __,
1876: darray
1877: __()
1878: ves
1879:  pytype
1880: Not
1881: pack
1882: rray
1883:  contents
1884: opi
1885:  define
1886: result
1887: 10
1888: =[])
1889:  item
1890:  backwards
1891: composite
1892: dified
1893:  AttrValue
1894: ++
1895: xtra
1896: desc
1897: validArgument
1898: validArgumentError
1899:  model
1900:  dependen
1901:  dependency
1902: 
                       
1903:  expected
1904:  inform
1905:  information
1906:  equ
1907: ne
1908: ')
1909: hile
1910:  hel
1911: ling
1912: FromString
1913:  clear
1914: Register
1915:  corresponds
1916:  defines
1917:  OpStats
1918:  how
1919: ooh
1920: oohic
1921: oohickey
1922: SES
1923:  eagerly
1924: uring
1925: safety
1926:  mut
1927: VE
1928: feed
1929: fetch
1930:  optimiz
1931:  were
1932: ual
1933: switch
1934: ority
1935:  doc
1936:  nest
1937: ignature
1938:  already
1939: store
1940: rain
1941: Que
1942: Queue
1943:  behavi
1944:  behavior
1945:  overri
1946:  their
1947:  appro
1948:  temp
1949: 
                          
1950: ores
1951:  bi
1952: stall
1953:  mark
1954:  placed
1955:  off
1956:  offset
1957: FO
1958: queue
1959:  stateful
1960: reset
1961: man
1962: ({
1963:  labels
1964: Wrapper
1965: )[
1966: server
1967: RAINABLE
1968: fns
1969: ights
1970:  License
1971: the
1972: SE
1973: AR
1974:  imp
1975:  go
1976:  sy
1977:  cast
1978:  TypeV
1979:  TypeVar
1980:  message
1981:  versions
1982:  avo
1983: unused
1984:  logging
1985: dentity
1986:  traceback
1987: deprecation
1988: Base
1989: sage
1990: lay
1991: raw
1992: file
1993:  Null
1994:  NullContext
1995:  NullContextmanager
1996:  otherwise
1997:  av
1998:  avail
1999:  available
2000:  scalar
2001:  repr
2002:  format
2003:  devices
2004:  invo
2005:  callback
2006: attrs
2007:  CPU
2008: ndarray
2009: bool
2010: mm
2011: ep
2012: status
2013: redefined
2014: To
2015: has
2016: ost
2017:  well
2018: perator
2019: no
2020:  ]
2021: ition
2022: :"
2023: consume
2024: consumer
2025:  eval
2026:  creates
2027: msg
2028: Cannot
2029: }")
2030: Un
2031: Conver
2032: Converts
2033:  consumed
2034:  wan
2035:  wants
2036:  invalid
2037:  sequence
2038: jo
2039:  extra
2040: com
2041:  don
2042: sequence
2043:  Add
2044: very
2045: ish
2046:  constructor
2047: matmul
2048: `)
2049:  genera
2050:  List
2051:  By
2052:  represents
2053: Si
2054: Size
2055:  <
2056:  3
2057: ose
2058:  change
2059:  equiv
2060:  equiva
2061:  equivale
2062:  equivalent
2063:  itself
2064:  ro
2065:  root
2066:  instances
2067:  memb
2068:  '/
2069:  descrip
2070:  description
2071:  nodes
2072: Pri
2073: Private
2074:  buf
2075:  shapes
2076: unt
2077:  oneof
2078: `."""
2079: CT
2080:  even
2081: UN
2082:  ",
2083: Run
2084: .*
2085: Registry
2086:  defining
2087: "]
2088: erenti
2089: [[
2090: okup
2091:  inc
2092:  inclu
2093:  +=
2094: stats
2095: ide
2096:  just
2097:  raised
2098: LOC
2099:  during
2100:  depend
2101:  seed
2102: RS
2103: fetchable
2104: unique
2105:  they
2106: sses
2107:  sti
2108:  still
2109: ((
2110:  nesting
2111:  apply
2112:  make
2113: [...
2114: [...,
2115:  previ
2116:  previous
2117: train
2118:  star
2119: tesize
2120: exten
2121: extend
2122:  while
2123: sive
2124: wri
2125: write
2126: elper
2127:  wrapper
2128: ving
2129:  "/":
2130: metadata
2131: objs
2132:  appropri
2133:  appropriate
2134:  sets
2135:  sure
2136:  ignored
2137:  reset
2138:  "/"
2139:  pr
2140:  print
2141: sets
2142:  newly
2143: push
2144: off
2145: ked
2146: top
2147:  trac
2148:  Ops
2149: strings
2150:  runs
2151:  implement
2152:  Uses
2153:  automatic
2154:  subset
2155: DefaultGraphStack
2156: ILE
2157: YN
2158: YNC
2159:  server
2160:  local
2161: style
2162: exc
2163: info
2164: My
2165: MyOp
2166: licing
2167:  Ap
2168: ersion
2169: ance
2170:  You
2171:  ob
2172: plic
2173:  distr
2174:  specific
2175: bad
2176:  avoid
2177:  protobuf
2178: invalid
2179: tfe
2180: oring
2181:  pydev
2182: callbacks
2183: EagerTensorBase
2184:  once
2185: gauge
2186:  provide
2187: play
2188:  lineno
2189: >"
2190:  non
2191:  times
2192:  **
2193: gac
2194: gacy
2195: teger
2196:  items
2197: summari
2198: __.
2199: pywrap
2200: __)
2201: ify
2202: CopyFrom
2203:  >
2204: zero
2205: =%
2206: )"
2207: Status
2208: ream
2209:  never
2210: 
                   
2211:  table
2212: sure
2213:  Use
2214: memory
2215: view
2216: 42
2217:  compatible
2218: sider
2219:  produce
2220: ever
2221:  produces
2222:  now
2223:  remove
2224: opies
2225: dim
2226: dtypes
2227: apture
2228:  super
2229: All
2230:  throu
2231:  through
2232:  accep
2233: Union
2234:  '_
2235:  '_'
2236:  results
2237:  cases
2238:  effect
2239: dexed
2240: dexedS
2241: dexedSli
2242: dexedSlices
2243: Out
2244: mr
2245: mrry
2246: _.
2247: _.\
2248: _.\\
2249: ]*
2250: Ser
2251:  every
2252: InvalidArgumentError
2253:  Convert
2254: level
2255:  Valid
2256:  Used
2257: levant
2258:  describ
2259: Rece
2260: Receiv
2261: Received
2262:  whose
2263:  lar
2264:  unused
2265:  (%
2266:  process
2267: cessing
2268:  useful
2269:  methods
2270:  location
2271: ass
2272:  evalu
2273: :@
2274: )]
2275: ATE
2276: traceable
2277: ('/
2278: ='
2279:  Traceable
2280:  keys
2281:  index
2282:  help
2283: OperationGet
2284: Bu
2285: Name
2286: ListValue
2287:  fields
2288:  ("
2289: lean
2290: slo
2291: slots
2292:  ["_
2293: erentiable
2294: ration
2295: lookup
2296:  operator
2297:  initial
2298:  pic
2299: les
2300:  GraphDef
2301:  partic
2302:  particular
2303:  containing
2304: [:
2305:  construction
2306: nch
2307: nchron
2308: lated
2309: GLOBAL
2310:  additional
2311:  stacks
2312: arning
2313:  necess
2314: fic
2315:  next
2316: feedable
2317: this
2318:  see
2319:  act
2320: compu
2321: compute
2322: loss
2323: cache
2324:  creators
2325:  Yield
2326:  Yields
2327:  ke
2328:  maint
2329:  mainta
2330:  maintain
2331:  want
2332:  simp
2333:  simply
2334:  keyw
2335:  keyword
2336: ]]]:
2337:  finalized
2338:  cannot
2339:  version
2340:  mean
2341:  inter
2342: signature
2343: Defined
2344: DefinedFunction
2345: tin
2346: ice
2347:  conf
2348: 
                                   
2349: Operations
2350: seen
2351:  generate
2352:  refers
2353:  exists
2354: ake
2355:  coll
2356:  Co
2357:  Collection
2358:  constra
2359: cre
2360: clo
2361:  resets
2362: ignore
2363:  overrid
2364:  overridden
2365: lea
2366: leared
2367:  nor
2368: isinstance
2369: EX
2370: EXP
2371: 
          
2372: }):
2373: square
2374: outside
2375:  automatically
2376: job
2377:  As
2378:  Ex
2379: switches
2380:  entering
2381: pat
2382: Config
2383: ConfigProto
2384:  DEVICE
2385:  seman
2386:  semantic
2387: UM
2388: UMM
2389: AVE
2390:  LO
2391: pensive
2392: FF
2393:  promotion
2394: LEG
2395: LEGA
2396: LEGAC
2397: LEGACY
2398: AF
2399: AFE
2400: promo
2401: 01
2402:  obtain
2403: less
2404: AS
2405:  CON
2406: TIONS
2407:  li
2408: lasses
2409: abc
2410:  enum
2411:  npt
2412: order
2413:  mon
2414:  monit
2415:  monitoring
2416: lat
2417: trace
2418: identity
2419:  bound
2420: OpStats
2421: OperationType
2422: 30
2423: 79
2424: ix
2425:  These
2426:  removed
2427: ality
2428: Bool
2429: hether
2430: INTE
2431: INTER
2432: INTERN
2433: TABLE
2434:  identi
2435: User
2436:  mis
2437:  typ
2438:  typic
2439:  typically
2440: Ab
2441: Abstra
2442: Abstract
2443: AbstractContext
2444: AbstractContextManager
2445: kw
2446: kwargs
2447: TFE
2448:  .
2449:  "<
2450: custom
2451: ("__
2452:  symbolic
2453:  cls
2454: verify
2455: bro
2456: broad
2457: broadc
2458: broadcast
2459: Create
2460:  invoke
2461:  const
2462:  special
2463:  uni
2464: ative
2465: lex
2466: ().__
2467: attribute
2468: redu
2469: NotO
2470: NotOk
2471: NotOkStatus
2472: NotOkStatusEx
2473: NotOkStatusException
2474: lpack
2475:  stream
2476: Pack
2477:  EagerTensors
2478:  performance
2479:  array
2480: memoryview
2481:  zero
2482:  rank
2483: arr
2484:  memory
2485:  How
2486:  However
2487: .,
2488:  performant
2489:  private
2490: spective
2491:  way
2492:  regular
2493:  known
2494:  dest
2495: fun
2496: record
2497: Shape
2498:  initialized
2499:  z
2500:  zip
2501:  implemented
2502:  what
2503:  look
2504: older
2505: posed
2506: ough
2507:  expect
2508:  event
2509:  eventually
2510: )}.")
2511: },
2512:  accepted
2513: 87
2514:  red
2515:  redund
2516:  redundant
2517: preferred
2518: IndexedSlices
2519: ume
2520: _%
2521:  unmo
2522:  unmodified
2523:  Other
2524: Output
2525: cc
2526:  extract
2527: ky
2528: 
                                            
2529:  might
2530: Fin
2531:  validates
2532:  indicates
2533:  end
2534:  replic
2535: By
2536: Byte
2537: ByteSize
2538: md
2539: ild
2540: itialize
2541: post
2542: processing
2543:  indirectly
2544:  managers
2545:  There
2546: arily
2547: wn
2548: DE
2549: CATE
2550: Sets
2551:  locations
2552:  applied
2553: ines
2554:  15
2555: NODE
2556:  Then
2557:  TraceableObject
2558:  coloc
2559:  prevent
2560: lease
2561: same
2562: ached
2563: While
2564: Buffer
2565: Clear
2566: wr
2567:  setting
2568: ()`,
2569:  none
2570: using
2571: register
2572: Di
2573: No
2574:  made
2575:  attempt
2576:  resources
2577:  include
2578:  doohickey
2579: Foo
2580: foo
2581: trie
2582:  making
2583: Sa
2584:  ","
2585:  com
2586:  Lookup
2587:  LookupError
2588: equ
2589: equal
2590:  trail
2591:  trailing
2592: ATION
2593: LOCK
2594: GR
2595: GROU
2596: GROUP
2597: RUN
2598:  Using
2599:  Def
2600:  synchron
2601:  vari
2602:  various
2603: Loc
2604: Lock
2605:  modi
2606:  wa
2607: mil
2608: milar
2609:  Function
2610:  could
2611: seed
2612: Version
2613: VersionDef
2614: GRA
2615: GRAP
2616: GRAPH
2617:  Set
2618: unfetchable
2619: vers
2620:  last
2621:  losses
2622:  OpDef
2623:  GraphType
2624: Exiting
2625: eso
2626: esource
2627:  compo
2628:  depends
2629:  previously
2630:  restore
2631:  [`
2632: `](
2633:  After
2634: QueueRun
2635: QueueRunner
2636:  Internal
2637:  interf
2638:  interfa
2639:  interface
2640:  bytesize
2641:  ano
2642:  another
2643: oth
2644:  contin
2645:  continue
2646: cond
2647:  whe
2648:  whether
2649:  overwrite
2650:  checks
2651: 
                  
2652: helper
2653:  log
2654:  Apply
2655:  mapped
2656:  messa
2657:  messages
2658:  snapshot
2659: snapshot
2660: "]:
2661: locked
2662:  ":"
2663:  Looks
2664: \"
2665:  exc
2666: err
2667: ).__
2668: sertion
2669:  makes
2670:  trea
2671:  treated
2672:  Make
2673:  fil
2674:  means
2675:  collected
2676:  push
2677: ured
2678: (...)
2679:  stores
2680: my
2681: (...,
2682: rac
2683:  foo
2684: closing
2685:  constraints
2686: plies
2687:  lay
2688: IFO
2689:  most
2690:  rele
2691:  cleared
2692:  q
2693:  domin
2694:  dominated
2695: pred
2696:  tr
2697:  trig
2698:  loss
2699: zation
2700:  buffers
2701:  Install
2702: ({"
2703: labels
2704: mapping
2705: mappings
2706: TensorSpec
2707:  bias
2708: ones
2709:  exception
2710:  init
2711:  outermost
2712: entry
2713: nables
2714:  picked
2715: SILE
2716: SILENT
2717: EA
2718: DEVICE
2719:  argv
2720:  main
2721: igrate
2722:  Tensorflow
2723: MODEL
2724: UE
2725: ING
2726:  LOC
2727:  LOCAL
2728:  TRAINABLE
2729: ESOU
2730: ESOUR
2731: ESOURCE
2732:  Collections
2733: symbolic
2734: __(*
2735: rep
2736: replace
2737:  expensive
2738:  grou
2739:  grouped
2740: legacy
2741: slicing
2742:  sof
2743:  soft
2744:  distribu
2745:  distributed
2746:  expre
2747: ang
2748: ================================
2749:  threading
2750:  typing
2751:  Pattern
2752: protobuf
2753:  full
2754:  imported
2755: filer
2756:  deprecation
2757:  kw
2758:  kwarg
2759: ara
2760:  functionality
2761: PES
2762: usage
2763: BoolG
2764: BoolGa
2765: BoolGauge
2766: Whether
2767: UserDevice
2768: UserDeviceSpec
2769: Store
2770: speci
2771: display
2772:  dev
2773:  fname
2774: filename
2775: lineno
2776: known
2777:  safe
2778: sh
2779:  conv
2780:  De
2781:  Deprecated
2782:  integer
2783: ID
2784:  representation
2785:  converts
2786:  formatting
2787:  para
2788:  paralle
2789:  parallel
2790:  access
2791: SymbolicTensor
2792: update
2793:  verify
2794: allow
2795: hs
2796: if
2797: const
2798:  float
2799: reduce
2800:  imm
2801:  immut
2802:  immutable
2803:  leng
2804:  length
2805:  dl
2806:  DL
2807:  DLPack
2808: Array
2809: ArrayL
2810: ArrayLi
2811: ArrayLike
2812: sen
2813: sitive
2814: dat
2815: datat
2816: datatype
2817:  Unlike
2818:  doing
2819:  Consider
2820: iding
2821:  remote
2822:  maybe
2823:  executes
2824:  tw
2825:  Mark
2826:  rather
2827: Num
2828:  elements
2829: method
2830:  Creates
2831: initi
2832: ecord
2833:  tape
2834: TensorShape
2835: defin
2836: definition
2837:  definition
2838: Use
2839:  backed
2840:  gpu
2841: fies
2842: GPU
2843: }.")
2844:  /
2845:  consumer
2846: capture
2847:  converti
2848:  convertible
2849:  placeh
2850:  placeholder
2851:  api
2852:  though
2853:  got
2854: )}")
2855:  range
2856: but
2857: }-
2858: pag
2859: 
                         
2860: argument
2861: 25
2862: 878
2863:  Fix
2864: ]]
2865:  ref
2866:  enume
2867:  enumerate
2868:  Otherwise
2869:  converted
2870: ques
2871: quested
2872:  respective
2873: compile
2874: .]
2875: .][
2876: SC
2877: SCOP
2878: SCOPE
2879:  flat
2880:  lists
2881:  wrap
2882:  wrapped
2883: sky
2884: skyew
2885: skyewm
2886: apply
2887: constru
2888: Seri
2889: Serialize
2890: SerializeTo
2891: SerializeToString
2892:  conven
2893:  conveni
2894: Finish
2895: bjects
2896: Mat
2897: MatM
2898: MatMul
2899: _.\\-
2900: _.\\-/
2901: _.\\-/]*
2902: points
2903: base
2904: typed
2905:  asso
2906:  associ
2907:  describes
2908:  incompatible
2909:  >=
2910: /")
2911: 40
2912:  '%
2913: Import
2914: ImportGraphDef
2915:  Gradient
2916:  evaluating
2917:  unne
2918:  unnecess
2919:  groups
2920:  own
2921:  id
2922: assign
2923: ments
2924:  members
2925:  relevant
2926:  member
2927:  colocated
2928:  lea
2929:  Each
2930:  update
2931:  Reset
2932: dge
2933: while
2934: }'
2935: lete
2936:  fet
2937:  fetch
2938: buffer
2939: wrong
2940: count
2941: Par
2942: OperationGetAttr
2943:  experiment
2944:  experimental
2945: experimental
2946:  info
2947: TFT
2948: PR
2949: PROD
2950: PRODU
2951: PRODUCT
2952: SET
2953: disable
2954: RegisterGradient
2955:  registering
2956:  res
2957: sub
2958: Registers
2959: NotDi
2960: NotDiff
2961: NotDifferentiable
2962: NoGradient
2963: Speci
2964: 20
2965: 27
2966:  hold
2967:  require
2968:  parame
2969:  forward
2970:  calc
2971:  calcul
2972:  OpStatsType
2973:  running
2974:  allows
2975: tal
2976:  guide
2977:  coun
2978: tric
2979: doohickey
2980:  retrie
2981:  slas
2982:  slash
2983: [:-
2984:  Define
2985:  note
2986:  external
2987:  synchroniz
2988:  large
2989:  related
2990: cts
2991: via
2992:  acces
2993:  warning
2994:  mutate
2995:  necessary
2996:  modify
2997: fication
2998: Group
2999: GroupLock
3000:  choo
3001:  Default
3002:  alterna
3003:  alternative
3004: CON
3005: unfeedable
3006:  optimizers
3007:  actual
3008:  outside
3009: /"
3010:  optimizer
3011:  buil
3012:  built
3013:  manually
3014:  vis
3015:  priority
3016: priority
3017:  ste
3018:  step
3019: mbd
3020: mbda
3021: apt
3022:  composed
3023:  initialization
3024: sable
3025:  guard
3026:  aga
3027:  again
3028:  exiting
3029:  modified
3030: finalize
3031:  envi
3032:  environ
3033:  environment
3034:  En
3035: docs
3036:  inferred
3037:  too
3038: ["_
3039: "].
3040:  appen
3041: 

         
3042: 
                                           
3043: 

           
3044: ["
3045: est
3046:  indicating
3047: '.
3048: remove
3049:  Most
3050:  base
3051:  generated
3052:  conflic
3053:  conflicts
3054:  assignment
3055:  overhe
3056:  overhead
3057: mutation
3058: round
3059:  appe
3060:  appear
3061: devices
3062:  concurrent
3063:  concurrently
3064:  Can
3065:  err
3066:  similar
3067: oper
3068:  Names
3069: ():`
3070: uplic
3071:  regex
3072: keys
3073:  pushes
3074:  life
3075:  lifetime
3076: solu
3077: solute
3078:  weights
3079:  biases
3080:  install
3081: cording
3082: ules
3083:  cha
3084:  charac
3085: bugging
3086:  runtime
3087: alization
3088:  know
3089: enclosing
3090:  applies
3091: Try
3092: Trying
3093:  spec
3094:  matmul
3095:  rec
3096:  recent
3097:  prior
3098: FIFO
3099: FIFOQueue
3100:  norm
3101:  start
3102: ism
3103: nodes
3104:  attempts
3105:  track
3106:  point
3107: IG
3108: IGH
3109: IGHT
3110:  trigger
3111:  direct
3112:  Resource
3113:  ResourceVariable
3114: EXPE
3115: EXPERI
3116: EXPERIMENT
3117: EXPERIMENTAL
3118: ({"_
3119: 
              
3120:  sele
3121: "}):
3122:  override
3123: Square
3124: deps
3125: controllers
3126:  comb
3127:  combined
3128:  optional
3129:  ful
3130:  fully
3131: ask
3132: *`
3133: )),
3134:  7
3135:  fa
3136:  referen
3137:  references
3138: sess
3139:  preser
3140:  sile
3141:  silent
3142:  silently
3143:  Example
3144: inside
3145: Enables
3146:  options
3147:  copies
3148: FOR
3149: main
3150:  changes
3151:  To
3152:  validate
3153: TRAINABLE
3154: model
3155:  mach
3156: trainable
3157: SUMM
3158:  summ
3159: ERS
3160: art
3161: runner
3162: OV
3163: OVING
3164: AVERA
3165: AVERAGE
3166:  keep
3167: SSES
3168: ulari
3169: ularization
3170:  Variable
3171:  GLOBAL
3172: INIT
3173: RESOURCE
3174: ARY
3175: Initialize
3176: /,
3177: 
                           
3178: Me
3179: Message
3180:  fn
3181:  semantics
3182: OFF
3183: ALL
3184: SAFE
3185:  Copy
3186:  201
3187:  Unless
3188: gre
3189:  wr
3190:  COND
3191:  K
3192:  impli
3193: age
3194: mit
3195:  Sequence
3196:  AnyStr
3197:  app
3198:  goo
3199: gle
3200:  iss
3201:  issue
3202:  issues
3203: lient
3204: profiler
3205:  trace
3206: GraphType
3207: OpStatsType
3208: EagerTensorType
3209: 93
3210:  bug
3211: oss
3212: orary
3213:  switches
3214: USE
3215: DT
3216: DTY
3217: DTYPES
3218: Data
3219: DataType
3220:  merg
3221: Mer
3222: Merge
3223: MergeDevice
3224: ST
3225:  missing
3226: fast
3227: ortc
3228: ortcut
3229:  suppre
3230:  suppress
3231:  exceptions
3232:  uid
3233: scal
3234:  bytes
3235:  scalars
3236:  python
3237: unpr
3238: unprint
3239: unprintable
3240:  "\
3241:  custom
3242: prefer
3243: summariz
3244: summarizer
3245: summarize
3246: PyTensor
3247:  callbacks
3248: Const
3249: invo
3250: invoke
3251: 147
3252: 70
3253:  On
3254:  pat
3255: ,),
3256: Native
3257: NativeObject
3258: complex
3259:  complex
3260: np
3261: non
3262:  differently
3263: (),)
3264:  themsel
3265:  themselves
3266: deep
3267: deepcopy
3268:  memo
3269: dlpack
3270:  *,
3271:  max
3272:  ):
3273:  Unused
3274: Dlpack
3275: hash
3276:  intern
3277: sensitive
3278:  models
3279:  ensure
3280:  tran
3281: sle
3282: slebe
3283: slebedev
3284: CPU
3285:  hol
3286:  holding
3287:  `.
3288: sually
3289:  host
3290:  two
3291: ea
3292:  et
3293:  etc
3294: unting
3295: deally
3296: elements
3297: nograd
3298: Copies
3299: initialized
3300:  Record
3301:  backpro
3302: dresult
3303:  dresult
3304:  dec
3305:  decla
3306:  placement
3307: eval
3308: 're
3309: prefix
3310: At
3311: .",
3312:  So
3313:  Some
3314:  Return
3315:  subclass
3316:  mod
3317: 17
3318: 1710
3319: "{
3320: }:
3321:  Pro
3322: pagate
3323: (_):
3324: hint
3325: 26
3326: 268
3327: 2683
3328: 26834
3329: 2683479
3330: 26834791
3331: 268347915
3332: =(
3333:  mind
3334:  converting
3335:  preference
3336: Sequence
3337:  mismatch
3338: )]]:
3339:  Di
3340: 
                                
3341: 
                                 
3342: opied
3343: "^
3344: "^[
3345: _.\\/
3346: _.\\/>
3347: _.\\/>-
3348: _.\\/>-]*
3349: _.\\/>-]*$
3350: _.\\/>-]*$")
3351: fil
3352: filter
3353:  flatten
3354:  handles
3355: reconstru
3356: reconstruct
3357: New
3358: 
                                               
3359: AddInput
3360: AttrValueProto
3361: StackT
3362: StackTrace
3363:  perfor
3364: such
3365: )`
3366:  passing
3367: )`.
3368: classmethod
3369:  OperationType
3370: `).
3371:  expression
3372:  ir
3373:  irre
3374:  irrelevant
3375: Tensors
3376:  endpoints
3377:  replica
3378:  replicated
3379:  <<
3380:  31
3381:  larger
3382: GB
3383: mdan
3384: ::
3385: "`
3386:  FI
3387:  FIX
3388:  FIXME
3389: 225
3390:  shall
3391: alizes
3392:  inv
3393:  invoc
3394:  invocations
3395:  line
3396:  thre
3397:  three
3398:  Pass
3399: Ch
3400: Check
3401: DEP
3402: DEPRE
3403: DEPRECATE
3404: DEPRECATED
3405: assignments
3406: Code
3407:  filename
3408:  suppo
3409:  suppose
3410:  contained
3411:  lines
3412:  16
3413:  ...]
3414:  }
3415: OperationNum
3416: Up
3417: Update
3418:  Please
3419:  cached
3420: See
3421: WhileInput
3422: WhileInputH
3423: WhileInputHack
3424:  helpful
3425: Inputs
3426:  goes
3427: NameAttr
3428: NameAttrList
3429:  funcs
3430: funcs
3431: clear
3432: GetBuffer
3433: Parse
3434: ParseFromString
3435: hi
3436: hich
3437: ullType
3438: UNSET
3439:  TFT
3440: Runs
3441:  Call
3442:  Calling
3443:  nee
3444:  needed
3445: ched
3446:  maps
3447: 95
3448:  Register
3449: represent
3450: representing
3451:  respe
3452:  respect
3453:  parti
3454: uming
3455:  `"
3456: Sub
3457: gative
3458: Specifies
3459:  differentiable
3460: "."""
3461:  including
3462:  parameters
3463:  FLO
3464:  FLOP
3465:  inference
3466:  usage
3467: Sta
3468: Stati
3469: Statistic
3470: Statistics
3471:  gives
3472:  form
3473:  hap
3474:  happen
3475: point
3476:  total
3477: tency
3478:  yo
3479:  your
3480:  counted
3481:  bas
3482:  basis
3483: cap
3484:  retrieve
3485: 'll
3486:  comma
3487:  associated
3488:  identify
3489:  stats
3490:  min
3491: MU
3492: MUT
3493: MUTATION
3494: SESS
3495: SESSION
3496:  Graphs
3497:  units
3498:  recom
3499:  recommen
3500:  recommended
3501:  classes
3502:  Import
3503:  synchronization
3504: rb
3505: rbit
3506: rbitra
3507: rbitrary
3508:  convenience
3509:  store
3510:  via
3511:  accessor
3512:  accessors
3513:  programs
3514:  guara
3515:  guaran
3516:  guarante
3517:  reported
3518:  ille
3519:  illeg
3520:  illegal
3521:  going
3522:  wait
3523:  until
3524:  Functions
3525:  choose
3526:  union
3527:  rand
3528:  random
3529: DEF
3530: VERS
3531: VERSION
3532:  St
3533:  dan
3534:  dange
3535:  dangero
3536:  dangerous
3537: ders
3538:  Al
3539:  behave
3540:  redu
3541:  reduction
3542: timizer
3543:  Automatic
3544:  AutomaticControlDependencies
3545:  Cache
3546:  protobufs
3547: reduced
3548:  pair
3549:  pairs
3550:  tuples
3551: enabled
3552: ulate
3553:  fro
3554:  froz
3555:  frozen
3556:  ready
3557:  visi
3558:  visibility
3559: Scope
3560: next
3561:  Creator
3562:  Creators
3563:  high
3564:  higher
3565:  With
3566:  side
3567:  properly
3568:  kee
3569:  keeps
3570:  initializes
3571:  later
3572: istration
3573: sort
3574: lambda
3575: rable
3576: gether
3577: 


   
3578:  signature
3579:  register
3580:  initializer
3581: ]]],
3582:  against
3583: dent
3584:  say
3585:  Unfin
3586:  Unfinaliz
3587:  Unfinalizing
3588: act
3589:  starting
3590: bytesize
3591: If
3592: cached
3593: gith
3594: github
3595:  had
3596:  adds
3597:  pybind
3598: ++,
3599: GraphTo
3600: GraphToGraphDef
3601:  iff
3602:  Both
3603:  rely
3604: sis
3605:  appended
3606: ateful
3607: ../
3608: Test
3609: rec
3610: Adds
3611: child
3612: childre
3613: children
3614:  San
3615:  Sanity
3616: GraphCopy
3617: GraphCopyFunction
3618:  12
3619:  found
3620:  Helper
3621:  low
3622:  consumes
3623:  mutates
3624:  ensu
3625:  ensures
3626:  mutating
3627: ret
3628:  around
3629: FinishWhile
3630:  ok
3631: lower
3632: mmon
3633:  requested
3634:  Do
3635:  overriding
3636: mapped
3637:  metadata
3638: stateful
3639: operations
3640:  properti
3641:  properties
3642:  Create
3643:  infor
3644:  informa
3645:  informative
3646: ical
3647:  allowed
3648:  gi
3649:  give
3650:  nice
3651: plit
3652:  both
3653:  appears
3654:  looks
3655: \"<
3656: >:
3657: >:<
3658: >\"
3659: exist
3660:  Act
3661:  Actually
3662:  referr
3663:  referring
3664: aries
3665:  exi
3666:  exited
3667:  wish
3668: Stores
3669:  severa
3670:  several
3671:  treat
3672:  resulting
3673:  filtered
3674:  matches
3675:  Items
3676:  cho
3677:  choice
3678:  tok
3679:  token
3680:  tokens
3681:  filters
3682: Clears
3683:  hand
3684:  handler
3685:  annot
3686: thing
3687: era
3688:  maintains
3689: (...):
3690: (...):`
3691:  statement
3692:  onto
3693:  follows
3694:  capt
3695:  captured
3696:  top
3697:  absolute
3698: (""
3699: (""):
3700:  overa
3701:  overall
3702: weights
3703: biases
3704: ffine
3705:  rules
3706:  Scope
3707:  Scopes
3708:  character
3709: "'
3710: "'{
3711:  pattern
3712:  {_
3713: pattern
3714:  blocks
3715:  stru
3716:  struct
3717:  structured
3718:  sepa
3719: rated
3720:  debugging
3721:  display
3722:  marked
3723:  actually
3724: crement
3725: En
3726: GradientCo
3727: GradientColocation
3728:  libra
3729:  librari
3730:  libraries
3731: **
3732: onger
3733:  fut
3734:  future
3735: tmp
3736:  frame
3737:  4
3738:  layers
3739: offset
3740:  document
3741:  documentation
3742: cpu
3743:  wrappers
3744:  released
3745:  beco
3746:  become
3747: ()`."""
3748:  normally
3749:  mech
3750:  mechan
3751:  mechanism
3752:  indicate
3753:  Clear
3754: For
3755:  adding
3756:  prun
3757:  contexts
3758:  waiting
3759:  ded
3760:  deduplic
3761:  manual
3762: ridge
3763: manual
3764:  operators
3765: )}):
3766:  Ad
3767:  Additional
3768:  select
3769: Custom
3770: CustomSquare
3771: Mark
3772: Marks
3773: Make
3774:  affect
3775: specs
3776: versed
3777: [_
3778:  comment
3779: executed
3780:  consider
3781:  general
3782: task
3783:  UID
3784:                    
3785: )])
3786: math
3787:                   
3788: bias
3789:  Error
3790:  5
3791:  Traceback
3792:  InvalidArgumentError
3793:                       
3794: 
  
3795: 2714
3796: 27146
3797: 271463
3798: 271463878
3799:  fav
3800:  favor
3801:  "`
3802: GetG
3803: GetGlobal
3804: GetGlobalDefaultGraph
3805: haps
3806:  hiding
3807: block
3808: [[],
3809:  necessarily
3810:  live
3811:  often
3812:  Entering
3813:  entered
3814:  entry
3815:  pop
3816:  constructs
3817: stop
3818: recording
3819:  lifting
3820: oolean
3821: dic
3822: dicates
3823:  provides
3824:  im
3825:  opposed
3826:  concre
3827:  concrete
3828:  startup
3829:  usable
3830:  configure
3831:  Policy
3832:  controlling
3833:  releases
3834: EXPLI
3835: EXPLIC
3836: EXPLICIT
3837:  correct
3838: WAR
3839: WARN
3840: INT
3841:  ones
3842:  dispat
3843:  SYNC
3844: ously
3845:  AS
3846: cell
3847: vlo
3848: vlog
3849: nab
3850: nabling
3851: EAGE
3852: EAGER
3853: Dis
3854: verDef
3855: ASYNC
3856: been
3857:  policy
3858:  unnecessary
3859:  migrate
3860: related
3861:  rewrite
3862: mig
3863: migration
3864: gu
3865: guide
3866: migrate
3867:  Assertion
3868:  AssertionError
3869:  due
3870: 55
3871: rstr
3872: rstrip
3873: ("/")
3874: valued
3875:  acro
3876:  across
3877: LOCAL
3878:  machine
3879:  trained
3880: ARI
3881: ARIES
3882:  summary
3883: summary
3884: QUE
3885: QUEUE
3886: RUNN
3887: RUNNERS
3888: runners
3889:  moving
3890:  avera
3891:  averages
3892: moving
3893: avera
3894: average
3895: GU
3896: GULA
3897: GULARI
3898: GULARIZ
3899: GULARIZATION
3900: LOSSES
3901:  regularization
3902: EIGHT
3903: EIGHTS
3904: IA
3905: IASES
3906: CTI
3907: CTIVA
3908: CTIVATIONS
3909: metric
3910:  ME
3911:  MET
3912:  METRI
3913:  METRIC
3914:  MODE
3915:  MODEL
3916:  SUMM
3917: table
3918:  asset
3919: paths
3920:  MOVING
3921: reg
3922: losses
3923: cate
3924: catena
3925: catenated
3926: arded
3927:  CONCATE
3928:  CONCATENA
3929:  CONCATENATE
3930:  CONCATENATED
3931:  SAVE
3932: tiv
3933: tivations
3934: veable
3935: resources
3936:  REA
3937:  READ
3938:  READY
3939: STE
3940: STEP
3941: step
3942:  count
3943: CONTE
3944: CONTEX
3945: CONTEXT
3946: SUMMARY
3947: CO
3948: COL
3949: COLLE
3950: COLLEC
3951: antle
3952:  EagerVariable
3953:  EagerVariableStore
3954:  part
3955:  layer
3956:  templ
3957:  template
3958:  Speci
3959: Start
3960:  auto
3961: restore
3962: "([
3963: "([\
3964: "([\^
3965: "([\^]
3966: "([\^]|
3967: :@|
3968: :@|^
3969: (.*
3970: (.*)"
3971: "\
3972: warning
3973:  implements
3974:  cir
3975:  circ
3976:  circular
3977: FunctionType
3978:  raw
3979:  Raw
3980: correspon
3981: corresponding
3982: number
3983:  OFF
3984:  LEGACY
3985:  AL
3986:  ALL
3987:  SAFE
3988: �
3989:  slicing
3990:  ints
3991:  Copyr
3992:  Copyright
3993:  2015
3994:  Aut
3995:  Auth
3996:  Author
3997:  Authors
3998:  Rights
3999:  Reser
4000:  Reserved
4001:  Licensed
4002:  Apache
4003:  Version
4004: Licen
4005: License
4006: ");
4007:  compli
4008:  compliance
4009:  htt
4010:  http
4011: apache
4012: licen
4013: licenses
4014: LICE
4015: LICEN
4016: LICENSE
4017:  applic
4018:  applicable
4019:  law
4020:  agre
4021:  agreed
4022:  writing
4023:  softw
4024:  software
4025:  IS
4026:  BAS
4027:  BASI
4028:  BASIS
4029:  WIT
4030:  WITH
4031:  WITHOU
4032:  WITHOUT
4033:  WAR
4034:  WARRA
4035:  WARRANT
4036:  WARRANTI
4037:  WARRANTIES
4038:  OR
4039:  CONDI
4040:  CONDITIONS
4041:  OF
4042:  AN
4043:  ANY
4044:  KIN
4045:  KIND
4046:  express
4047:  implied
4048:  lang
4049:  langu
4050:  language
4051:  gover
4052:  governing
4053:  perm
4054:  permis
4055:  permission
4056:  permissions
4057:  limit
4058:  limitations
4059:  =================================
4060:  =================================================================
4061:  =========================================================================
4062:  =============================================================================
4063:  ==============================================================================
4064: Classes
4065:  contextlib
4066:  sys
4067:  abs
4068:  absl
4069:  google
4070: 143
4071: 14311
4072: 143110
4073: 14311011
4074: 143110113
4075: client
4076: plat
4077: platform
4078: logging
4079:  profiler
4080: ="_
4081: 307
4082: 30779
4083: 307794
4084: 30779493
4085: 307794935
4086:  fix
4087:  fixed
4088:  Up
4089:  Upd
4090:  Updated
4091:  copyb
4092:  copybara
4093:  Te
4094:  Temp
4095:  Temporary
4096:  deter
4097:  determin
4098:  determining
4099: progre
4100: progress
4101: API
4102: SH
4103: SHA
4104: SHAPES
4105:  identifi
4106:  identifier
4107: specified
4108:  merged
4109: fir
4110: first
4111: firstlineno
4112: unknown
4113: <%
4114: tay
4115: tayl
4116: taylor
4117: taylorro
4118: taylorrobi
4119: taylorrobie
4120:  MU
4121:  MUST
4122:  signa
4123:  signals
4124:  callers
4125:  safely
4126:  null
4127:  merges
4128: trivi
4129: trivial
4130:  cost
4131: shortcut
4132: Convert
4133:  Object
4134: conv
4135:  legacy
4136:  pur
4137:  purpo
4138:  purposes
4139: dense
4140: within
4141: UID
4142: Hum
4143: Human
4144:  readable
4145: isscal
4146: isscalar
4147: Either
4148:  Custom
4149:  compon
4150:  components
4151:  Control
4152:  Controls
4153:  style
4154: verb
4155: verbosi
4156: verbosity
4157:  formatted
4158:  fri
4159:  friend
4160: make
4161:  {"
4162:  [],
4163: should
4164: 1476
4165: 147670
4166: 14767070
4167: 147670703
4168:  Once
4169:  paths
4170:  unified
4171: ()).__
4172: nonzero
4173:  behaves
4174: >".__
4175: (%
4176:  dimen
4177:  dimension
4178: ndims
4179: Scalar
4180: ()`")
4181: ()[
4182: ToDlpack
4183: ToDlpackC
4184: ToDlpackCap
4185: ToDlpackCapsu
4186: ToDlpackCapsule
4187: DlpackDevice
4188:  hash
4189:  hashable
4190:  unhash
4191:  unhashable
4192: Instead
4193: ()]
4194:  arrays
4195:  safety
4196:  readonly
4197:  view
4198: asarray
4199:  trans
4200:  transferred
4201:  avoiding
4202: may
4203: maybe
4204:  backing
4205: backing
4206:  usually
4207:  produced
4208:  avoids
4209:  Marked
4210:  perspective
4211:  better
4212:  getting
4213:  expo
4214:  exposing
4215:  hea
4216:  heaven
4217:  forbi
4218:  forbid
4219: !).
4220:  Punting
4221:  ideally
4222:  thing
4223:  things
4224: ran
4225: rank
4226: Integer
4227:  Integer
4228: Number
4229:  Long
4230: stati
4231: static
4232: staticmethod
4233: operator
4234:  setattr
4235: ensure
4236: ctx
4237:  backprop
4238: memb
4239: member
4240: before
4241:  declared
4242: Ali
4243: Alias
4244:  cpu
4245:  Identi
4246:  Identifies
4247:  Me
4248:  Method
4249:  Methods
4250:  consumers
4251: consumers
4252:  looking
4253: ?")
4254: Attemp
4255: Attempting
4256:  capture
4257: Capture
4258:  registers
4259:  modu
4260:  module
4261:  exposed
4262: 17108
4263: 1710810
4264: 17108105
4265: 171081052
4266:  cove
4267:  covered
4268: =[])(
4269: Init
4270: InitEagerTensor
4271:  ms
4272:  msg
4273: }"
4274: ]._
4275: Found
4276:  Propagate
4277: Computing
4278: packed
4279: wrapper
4280: Implement
4281: Implementation
4282: 1425
4283: 14251
4284: 14251878
4285: 142518781
4286: sites
4287:  ...,
4288:  Pre
4289:  Prese
4290:  Present
4291: Requested
4292: ``,
4293:  Dictionary
4294:  Copied
4295: josh
4296:  Conso
4297:  Consoli
4298:  Consolidate
4299:  validation
4300:  flattened
4301:  grouping
4302:  looked
4303: *.
4304:  flattens
4305:  incom
4306:  incoming
4307:  Ref
4308:  Refac
4309:  Refactor
4310: NewOperation
4311: SetDevice
4312: AddInputList
4313: 
                                       
4314: AddControl
4315: AddControlInput
4316:  dele
4317:  deletes
4318:  wor
4319:  worth
4320:  convenient
4321:  status
4322: SetAttrValueProto
4323: 
                                          
4324: FinishOperation
4325:  stacktrace
4326: SetOp
4327: SetOpStackTrace
4328: extra
4329: extract
4330: stacklevel
4331: PyOperation
4332: Represent
4333: Represents
4334:  performs
4335:  Objects
4336:  shortcut
4337: passed
4338:  generating
4339:  parent
4340:  `[
4341: ]`.
4342:  associate
4343: ()}
4344:  belong
4345: AddN
4346: AddNode
4347: "`{
4348: }`
4349: Ac
4350: Accep
4351: Accepted
4352:  conform
4353:  Reg
4354:  Regex
4355:  /{
4356:  /{_
4357: }/")
4358: 22540
4359: 2254001
4360: 22540018
4361: 225400189
4362: Ite
4363: Items
4364:  Bu
4365:  Build
4366:  IndexedSlices
4367:  Initialize
4368:  Post
4369:  flows
4370: Initi
4371: Initializes
4372: UserDe
4373: UserDev
4374: UserDevSpec
4375: UserDevSpecs
4376:  users
4377:  Dict
4378:  ways
4379:  gets
4380:  unnecessarily
4381: CheckInput
4382: CheckInputFrom
4383: CheckInputFromV
4384: CheckInputFromValid
4385: CheckInputFromValidContext
4386: AddOp
4387: :@%
4388: star
4389: starts
4390: startswith
4391: :@")
4392:  ...]:
4393: OperationDevice
4394:  desi
4395:  desired
4396:  leaking
4397:  14
4398: ':
4399:  enums
4400: OperationNumOut
4401: OperationNumOutputs
4402: OperationOutput
4403: OperationOutputType
4404: UpdateE
4405: UpdateEdge
4406:  AddWhileInputHack
4407: AddWhileInputHack
4408: Ra
4409: Raises
4410:  '{
4411:  '{}'
4412: GetOperation
4413: GetOperationInputs
4414: OperationNumInputs
4415: OperationInput
4416: OperationInputType
4417: 22542
4418: 225423
4419: 2254235
4420: 22542359
4421: 225423591
4422:  dang
4423:  dangling
4424: OperationGetStackTrace
4425: NewBuffer
4426: NewBufferFromString
4427: ()))
4428: Delete
4429: DeleteBuffer
4430: alloc
4431: allocated
4432: SetAttr
4433: dt
4434:  dt
4435: ClearAttr
4436: OperationGetAttrValueProto
4437: Which
4438: WhichO
4439: WhichOne
4440: WhichOneof
4441: getattr
4442: Uns
4443: Unsup
4444: Unsupported
4445: OperationGetAttrType
4446: OperationGetAttrBool
4447: OperationGetAttrI
4448: OperationGetAttrInt
4449:  FullType
4450:  FullTypeDef
4451:  singl
4452:  singlre
4453: full
4454:  ":
4455: SetF
4456: SetFullType
4457:  prece
4458:  preceding
4459:  Be
4460:  Before
4461:  invoking
4462:  laun
4463:  launched
4464: 18
4465: 185
4466: 1853
4467: 185395
4468: 1853957
4469: 185395742
4470:  Clean
4471:  usa
4472:  usages
4473:  RegisterGradient
4474:  partial
4475:  assuming
4476:  take
4477: negative
4478: endpoints
4479:  propagate
4480:  zeros
4481:  declaration
4482: must
4483:  thro
4484:  thrown
4485:  reque
4486:  request
4487:  Ali
4488:  Aliases
4489:  computes
4490: (_)
4491: 74
4492: 746
4493: 74620
4494: 746206
4495: 74620627
4496:  holder
4497:  holds
4498:  requirements
4499:  size
4500:  weight
4501: disk
4502:  FLOPS
4503:  requires
4504:  disk
4505:  spa
4506:  space
4507:  calculate
4508:  placeholders
4509: iadd
4510:  OpSt
4511:  OpStat
4512: statistical
4513:  RegisterStatistics
4514:  report
4515:  Well
4516:  far
4517:  flo
4518:  flops
4519:  bul
4520:  bulk
4521:  happens
4522:  nume
4523:  numeri
4524:  numerical
4525:  calculations
4526:  matri
4527:  matrix
4528:  multiplic
4529:  multiplications
4530:  floating
4531:  complete
4532:  FLOPs
4533:  good
4534:  latency
4535:  picking
4536:  care
4537:  Since
4538:  suit
4539:  suitable
4540: capac
4541: capacity
4542:  RN
4543:  RNN
4544:  metric
4545:  pl
4546:  plac
4547:  placing
4548: RegisterStatistics
4549: calc
4550: bo
4551: boj
4552: bojang
4553: bojangles
4554:  20
4555:  client
4556:  calculated
4557:  amo
4558:  amount
4559: Saves
4560: Look
4561: Looks
4562:  describing
4563:  identifying
4564:  inte
4565:  interes
4566:  interested
4567:  minus
4568:  "/")
4569: ()._
4570: 
                                                  
4571: PyGraph
4572:  represe
4573:  represen
4574:  represented
4575:  dataflow
4576:  computations
4577:  ##
4578:  ###
4579:  Important
4580:  supports
4581:  arbitrary
4582:  identified
4583: named
4584:  specifying
4585:  Prote
4586:  Protects
4587:  Thread
4588:  best
4589: eff
4590: effort
4591:  buggy
4592:  guaranteed
4593:  prote
4594:  protect
4595: RLock
4596:  synchronizes
4597: ()).
4598:  modification
4599:  Si
4600:  Similar
4601:  Similarly
4602:  finish
4603:  finished
4604:  Map
4605:  Maps
4606:  Current
4607:  Cond
4608:  CondContext
4609:  While
4610:  WhileContext
4611:  Arbitrary
4612:  computing
4613:  conside
4614:  considered
4615: Or
4616: Orde
4617: Ordered
4618: OrderedDi
4619: OrderedDict
4620:  producer
4621: MIN
4622: CONS
4623: CONSU
4624: CONSUME
4625: CONSUMER
4626:  Stack
4627: ObjectI
4628: ObjectIdentity
4629: ObjectIdentitySet
4630: fee
4631: feeders
4632: readers
4633:  move
4634: movers
4635:  delete
4636: dele
4637: deleters
4638:  Allow
4639:  pse
4640:  pseu
4641:  pseud
4642:  pseudo
4643: uniquely
4644:  defini
4645:  definitions
4646:  seeing
4647: -%
4648: weigh
4649: weighted
4650:  Back
4651:  Backward
4652: last
4653: reduction
4654:  Requi
4655:  Required
4656: sca
4657: scaled
4658: optimizer
4659: acd
4660:  acd
4661:  retrieved
4662: indi
4663: indices
4664: kep
4665: kept
4666:  tile
4667: scaling
4668:  places
4669:  manip
4670:  manipulate
4671:  Lea
4672:  Leave
4673:  clean
4674:  cleaned
4675: 100
4676:  taking
4677:  docstring
4678:  Within
4679:  Sort
4680:  Sorting
4681:  stable
4682:  put
4683:  registration
4684: 19
4685: 192
4686: 19240
4687: 192405
4688: 1924054
4689: 192405401
4690:  unify
4691:  Capt
4692:  Captu
4693:  Capturable
4694:  CapturableR
4695:  CapturableResource
4696: __`.
4697:  Giv
4698:  Given
4699:  together
4700:  supposed
4701:  helps
4702:  composable
4703:  defer
4704:  seen
4705:  Sta
4706:  Static
4707:  StaticH
4708:  StaticHas
4709:  StaticHash
4710:  StaticHashT
4711:  StaticHashTable
4712:  exis
4713:  existed
4714: defaultdict
4715:  acci
4716:  accident
4717:  accidental
4718:  mutation
4719:  however
4720:  save
4721:  And
4722:  lets
4723:  leading
4724:  meaning
4725:  finalize
4726: Finalizes
4727: unsafe
4728: unfinalize
4729: Opp
4730: Opposite
4731:  negative
4732:  impact
4733:  especi
4734:  especially
4735:  multi
4736: threa
4737: threaded
4738:  lead
4739:  Ensure
4740:  sessions
4741:  clo
4742:  closed
4743: GradientDef
4744: chrom
4745: chromi
4746: chromium
4747: goo
4748: google
4749: googlesource
4750: external
4751: /+
4752: /+/
4753: GraphToGraphDefPy
4754: GraphToGraphDefPybind
4755:  Str
4756:  Strip
4757: ClearF
4758: ClearField
4759: EagerDefinedFunction
4760:  really
4761: 14147
4762: 141471
4763: 1414712
4764: 14147124
4765: 141471245
4766:  incon
4767:  inconsis
4768:  inconsistency
4769:  fi
4770:  fille
4771:  filled
4772: 
                 
4773: Stateful
4774: StatefulPar
4775: StatefulParti
4776: StatefulPartition
4777: StatefulPartitioned
4778: StatefulPartitionedC
4779: StatefulPartitionedCall
4780:  Fil
4781:  Filter
4782: possi
4783: possib
4784: possibly
4785:  backpropag
4786:  backpropagation
4787:  rewr
4788:  rewriting
4789: Tout
4790: ](../
4791: ](../../
4792:  https
4793: Tests
4794: recur
4795: recursive
4796:  twice
4797:  Need
4798: enough
4799: GraphRe
4800: GraphRemove
4801: GraphRemoveFunction
4802: Shapes
4803:  constructors
4804:  Has
4805:  idx
4806:  #%
4807: idx
4808:  Implement
4809:  Implements
4810:  ends
4811:  '/'
4812:  removing
4813:  '/'.
4814:  occ
4815:  occur
4816: since
4817:  respon
4818:  responsi
4819:  responsible
4820:  hasn
4821:  leave
4822:  guarantee
4823: Common
4824:  logic
4825:  Snapshot
4826:  inde
4827:  indepen
4828:  independent
4829:  sor
4830:  sorted
4831:  Sets
4832:  underly
4833:  underlying
4834:  accessing
4835:  referred
4836:  canon
4837:  canonical
4838: validate
4839:  attempting
4840:  vast
4841:  maj
4842:  majority
4843:  fig
4844:  figuring
4845:  wrong
4846:  Ideally
4847:  split
4848: split
4849: (":
4850: (":")
4851:  \"<
4852: >\"."
4853:  Yep
4854:  "\"<
4855: >\".")
4856: OperationName
4857: buil
4858: builtin
4859:  locking
4860:  lookup
4861:  insertion
4862:  diction
4863:  dictionaries
4864:  ato
4865:  atom
4866:  atomic
4867:  lev
4868:  level
4869:  levels
4870:  examples
4871:  Constru
4872:  Construct
4873:  Constructing
4874:  duplic
4875:  duplicates
4876:  membersh
4877:  membership
4878:  iterable
4879: ,)
4880: Python
4881:  annotate
4882:  orig
4883:  origin
4884:  originator
4885:  differenti
4886:  differentiated
4887:  Nothing
4888:  hi
4889:  hiera
4890:  hierar
4891:  hierarch
4892:  hierarchical
4893:  interpre
4894:  interpreted
4895:  ending
4896:  '/')
4897: :`
4898: absolute
4899: empty
4900:  Treat
4901:  Treats
4902: 50
4903: :`,
4904: layer
4905:  affine
4906: nn
4907: relu
4908: affine
4909:  expressions
4910:  installs
4911:  according
4912:  characters
4913: viz
4914:  '-
4915:  '-',
4916:  '\
4917:  '\',
4918:  '/',
4919:  '_').
4920:  restr
4921:  restric
4922:  restrictive
4923:  constrain
4924:  constrains
4925: =""
4926:  rare
4927:  rarely
4928:  separated
4929:  `"/"
4930:  `"/"`,
4931:  displayed
4932:  visu
4933:  visualization
4934:  tool
4935:  tools
4936:  TensorB
4937:  TensorBo
4938:  TensorBoard
4939: mark
4940:  Whether
4941:  sake
4942:  checking
4943:  insensitive
4944:  Increment
4945:  someone
4946: ").
4947:  cap
4948:  capit
4949:  capitalization
4950: Enter
4951: EnterGradientColocation
4952: Exit
4953: ExitGradientColocation
4954:  matter
4955: NOTE
4956:  applying
4957:  inten
4958:  intended
4959: stronger
4960:  win
4961:  storing
4962:  sum
4963:  our
4964:  j
4965:  jump
4966:  us
4967:  Restore
4968:  separate
4969: total
4970:  unless
4971:  invoked
4972:  enclosing
4973:  synt
4974:  synta
4975:  syntax
4976: DeviceName
4977: DeviceNameU
4978: DeviceNameUtil
4979: DeviceNameUtils
4980:  Defines
4981: .**
4982: Ap
4983: Applies
4984:  LIFO
4985:  recently
4986:  pushed
4987:  chance
4988:  Take
4989:  adv
4990:  advan
4991:  advanta
4992:  advantage
4993:  fact
4994:  singlet
4995:  singleton
4996:  interns
4997:  identity
4998:  fas
4999:  faster

256:   
257:     
258: on
259:  t
260:    
261: or
262: in
263: de
264: se
265: pe
266: te
267: re
268:  a
269: ra
270: ti
271:  c
272:  th
273: is
274: me
275: tion
276: :

277:      
278: na
279: le
280:  o
281: al
282: 


283: st
284:  the
285: en
286: ce
287: ro
288: name
289: er
290: ""
291:  f
292: sel
293: self
294: def
295: rap
296:  `
297:  i
298:  in
299: at
300: sor
301: raph
302:  e
303: un
304: ype
305: ur
306:  re
307:  =
308: ut
309:  #
310:  w
311:  n
312: ._
313:         
314:  g
315: ing
316: th
317:  b
318:  is
319: ction
320: co
321: lo
322: ac
323:  s
324: .

325:  p
326: ue
327:  con
328:  to
329: tur
330: turn
331: )

332:  T
333: ensor
334:  self
335: ble
336: mp
337: one
338:        
339: ul
340: type
341:  no
342:  an
343: """
344: None
345:  d
346:  m
347:  if
348:  def
349: an
350: alue
351: vi
352: unction
353: xt
354: ack
355:  name
356: ss
357: op
358: .


359: put
360: ted
361: tr
362:  of
363:  "
364: con
365: text
366: able
367: vice
368:  return
369:  wi
370:  op
371: device
372: ec
373:  """
374: ar
375:  for
376:  A
377:  co
378:  be
379: ed
380: ger
381:  not
382: pera
383: cope
384: _st
385: peration
386: es
387:  -
388:  ex
389: li
390:  graph
391: ()
392: rea
393: ha
394: value
395:  ->
396:  st
397: ult
398:  _
399: nt
400: _f
401:  None
402: tro
403: trol
404: loc
405: _s
406: ist
407: ror
408: ault
409:  Th
410: to
411: tf
412: graph
413:  u
414:  with
415: _def
416:  and
417: ly
418: et
419: pro
420:  that
421: Er
422: Error
423: _stack
424: bj
425: Tensor
426: rom
427: ,

428: ter
429:  tensor
430: ):

431: (self
432: ver
433:  py
434: puts
435: ll
436:  context
437: low
438: ion
439: ci
440: Re
441:  as
442:  (
443: _name
444: _type
445: ten
446: di
447: ise
448:  use
449:  l
450: int
451: )


452: ode
453: ager
454:  function
455:  I
456:  this
457: tensor
458: lle
459: _e
460: ttr
461:  or
462:                 
463:  ma
464: as
465: ation
466: Operation
467: rg
468: _graph
469:          
470:  device
471: ort
472: el
473: _scope
474: ch
475:  The
476: pen
477: ts
478: Graph
479: Return
480:  ra
481:  wh
482:  value
483: _con
484: _in
485:  pyl
486:  pylint
487: ment
488: _op
489: ve
490: hape
491: llection
492: _function
493: cted
494: bjec
495: ate
496: den
497: _m
498: (

499:  list
500: set
501:  str
502:  raise
503:  tf
504: ty
505: De
506:  dis
507: ig
508: py
509: cess
510: per
511: read
512: Returns
513: ey
514: ecu
515:  ne
516:  scope
517:  attr
518:  de
519: up
520: _o
521: Value
522:  default
523: bu
524: nager
525:  control
526:  disable
527: la
528: stan
529:  """

530:  are
531:  pro
532: attr
533: penden
534: Op
535: ("
536: ap
537: ct
538: ent
539:  cal
540: ari
541: ali
542: _tensor
543: __
544: radi
545: ..
546:  If
547: pendenci
548: pendencies
549: ssion
550:  will
551:  ha
552:  objec
553:  on
554: access
555:  it
556: ore
557: =pro
558: =prote
559: =protected
560: -access
561:  N
562:  F
563:  crea
564: Def
565: ta
566: dd
567:  type
568:  @
569:  operation
570: it
571: ")

572: get
573: ati
574: radient
575:  comp
576: red
577: _to
578:  v
579: ()

580: location
581: _c
582: ariable
583: si
584:  dtype
585:  execu
586: mport
587: thon
588:  Arg
589:  Args
590: =None
591: so
592: str
593: _p
594: nable
595: reat
596:  used
597: _co
598: ex
599: .con
600:  R
601: _ex
602: fi
603:  collection
604: oo
605:  This
606: dtype
607:  S
608:  from
609:  C
610: session
611: ere
612: ry
613: flow
614: stance
615: ri
616:  new
617:  h
618:  el
619:  else
620:  Tensor
621:  string
622: _default
623: local
624:  me
625:  Value
626:  inputs
627: ibu
628: ==
629: ."""
630: and
631:  %
632: sion
633: tional
634: il
635: reator
636:  by
637: gis
638: lic
639: ust
640:  enable
641:  Returns
642: _de
643:  al
644: mple
645: urce
646: tain
647: um
648: .f
649: python
650: _re
651: race
652:  do
653:  [
654:  whi
655:  get
656:  can
657: ]:

658: ."""

659: lib
660: rue
661: .name
662: source
663:  import
664: version
665:  di
666: ot
667: sed
668: cep
669:  Type
670: ith
671: pre
672: _pb
673:  node
674: 



675:  __
676: unc
677: "

678: _device
679: key
680:  input
681: thread
682:  un
683: Optional
684: instance
685:  which
686: peci
687: _tf
688:  ops
689: ibute
690: aliz
691:  created
692:  Operation
693: _context
694:            
695: _dependencies
696: rent
697: (op
698: _local
699: from
700:  stack
701: port
702: Type
703:  eager
704: urrent
705: _inputs
706:  y
707:  call
708: _n
709: ff
710: `,
711:  manager
712: _map
713: ou
714: ge
715: ata
716:  isinstance
717: (name
718: iv
719: Eager
720: mo
721:  "

722: ding
723: control
724: iel
725: ield
726:  ``
727:  ```
728: Key
729: LE
730: _value
731: _u
732: __(
733:  execution
734:  try
735:  objects
736: run
737: inal
738:  speci
739: anager
740: proto
741: alse
742: tic
743:  must
744: comp
745: ",
746: Con
747: .T
748: utput
749: ser
750: qu
751:  tensorflow
752: ler
753: lement
754: .as
755: `.

756:  {
757:  when
758:  P
759: _eager
760:  have
761: _creator
762: andle
763: terna
764: uld
765:  all
766: lass
767:  sa
768: ke
769:  has
770: perty
771:  current
772: _mode
773: wrap
774: _or
775: vert
776: od
777: ]

778: list
779:  excep
780:  so
781: all
782:  object
783: ther
784:  values
785: ument
786: ...
787: _session
788: raceable
789: ternal
790:  we
791: .get
792: shape
793:  Ra
794:  giv
795:  thread
796: ase
797: ould
798: thod
799: 's
800: ():

801: ined
802: ises
803:  set
804:  se
805:  For
806: ample
807:  proto
808: _shape
809: with
810:  does
811: :


812:  Raises
813:  pre
814:  given
815: til
816: St
817: AB
818: ABLE
819:  tensors
820: bo
821: _proto
822:  arg
823: ded
824:  Key
825: bel
826:  may
827:  specifi
828: ump
829:  pywrap
830: lock
831:  *
832: `.


833:  +
834:  example
835:  contain
836: stic
837:  except
838:  U
839: umpy
840: site
841: _str
842:  method
843: .Tensor
844:  shape
845:  operations
846: VA
847:  gradient
848: stru
849: alid
850: .python
851: osite
852: _types
853: )



854: _g
855: _control
856: add
857:  attribute
858: iginal
859:  Graph
860: atistic
861: ])

862:  add
863: _attr
864: RI
865: ner
866: der
867: ad
868: data
869: OD
870: sing
871: ))

872:  Eager
873: property
874: ach
875:  No
876: try
877:  bu
878: ."
879: .function
880: lif
881: _b
882:  mode
883:  but
884:  names
885:  Se
886: ====
887:  regis
888: for
889: arg
890: tes
891: pli
892:  '
893:  TF
894:  constru
895: ary
896: pec
897: .A
898: (f
899:  ==
900: roup
901: `

902: ork
903: compat
904: ):
905:  sup
906:  allow
907: .TF
908: tem
909: alized
910:  variable
911:              
912:  compu
913:  colocation
914:  collections
915: ated
916: _export
917:  sh
918: led
919: bi
920: ()`
921: mat
922: stant
923: uter
924: ic
925:  la
926: ool
927:  su
928: fer
929: ol
930: ker
931: kern
932: kernel
933: ().
934:  In
935:  resource
936:  argument
937: .)
938: rate
939: mposite
940: (c
941: sert
942: variable
943:  ap
944: back
945: _flow
946:  True
947:  called
948: que
949: @tf
950: time
951: su
952:  ct
953:  ctx
954: .context
955: uting
956: values
957: default
958: _collection
959: opy
960:  en
961: rame
962: out
963: node
964: _element
965: sult
966: False
967: In
968: _list
969:  one
970: Co
971: ard
972: _VA
973:  dependencies
974: isting
975: ps
976: RIABLE
977: romo
978: lob
979: lobal
980:  elif
981: ally
982:  only
983:  ac
984: .__
985: _dtype
986:  key
987: 't
988: ecuting
989: _operation
990: .")

991:  returned
992: _input
993:  ...
994: _obj
995:  run
996: RIABLES
997:  L
998:  W
999: id
1000: .op
1001:  should
1002: TE
1003:  ch
1004:  pa
1005: obj
1006: .Graph
1007: inputs
1008: _VARIABLES
1009:  types
1010: fig
1011: _lib
1012: =False
1013: dex
1014: uple
1015: True
1016: >>
1017:  more
1018: .device
1019: .ex
1020:  enabled
1021: ilding
1022: mpty
1023: bili
1024: bility
1025: tered
1026: locate
1027:  ad
1028: ested
1029:  outer
1030: ile
1031: work
1032: _util
1033: error
1034: _data
1035: prec
1036: ecution
1037:  other
1038:       
1039:  session
1040: resource
1041: _by
1042: `.
1043: oc
1044:  map
1045: gradient
1046:  any
1047:  colle
1048:  functions
1049:  An
1050: ramework
1051: _t
1052: bject
1053: init
1054: _func
1055:  func
1056: context
1057: prese
1058: ),
1059:  code
1060: us
1061: iti
1062: ine
1063:                         
1064: =[
1065: handle
1066: _ref
1067: atibility
1068: Composite
1069: _with
1070: (v
1071:  original
1072: colocation
1073:  you
1074:  See
1075: age
1076: tor
1077:  Con
1078: cor
1079:  internal
1080: class
1081: dis
1082: eck
1083: manager
1084: pr
1085: present
1086: ym
1087: ymbo
1088: ymbolic
1089: copy
1090:  class
1091: .shape
1092:  Run
1093:  Runtime
1094: ME
1095: _Operation
1096:  specified
1097: .v
1098:  been
1099:  compute
1100:  ```


1101: _la
1102: ved
1103: ir
1104: gistry
1105:  lo
1106: .compat
1107: (tensor
1108:  False
1109:  result
1110: reate
1111: ]


1112:  same
1113:  out
1114: _di
1115:  create
1116: eren
1117: pend
1118: ctionary
1119: _ops
1120: res
1121:  statistic
1122: Variable
1123: _label
1124: side
1125: tainer
1126: scope
1127: CE
1128: IN
1129:  Optional
1130:  handle
1131: PI
1132:  bool
1133: he
1134: (device
1135:  "_
1136: ":

1137: .Attr
1138:  using
1139: rect
1140: tive
1141: .constant
1142: ([
1143:  returns
1144:  output
1145: ).

1146: ant
1147: rad
1148:  )
1149: _eagerly
1150: lace
1151:  registered
1152: Control
1153:  dictionary
1154:  yield
1155:  ig
1156:  ign
1157:  collect
1158:  Re
1159: ping
1160: .framework
1161: form
1162: _arg
1163: ="
1164:  TOD
1165:  TODO
1166:  API
1167: ow
1168:  represent
1169:  te
1170: om
1171: ze
1172: ew
1173: ()


1174: _en
1175: .graph
1176: .S
1177:  its
1178:  strings
1179:  copy
1180: ON
1181:  per
1182: ull
1183: _conversion
1184: fter
1185: _execution
1186: .")


1187: DType
1188: ique
1189: _string
1190:  M
1191:  case
1192:  man
1193:  element
1194:  le
1195: ulti
1196: ],
1197:  here
1198: =True
1199: ferred
1200: verri
1201: [str
1202: ffer
1203:  constructed
1204:  added
1205: gy
1206: _existing
1207: ses
1208:  error
1209: (b
1210: _v
1211: _me
1212: .g
1213: ultip
1214: fy
1215: PU
1216: men
1217: cit
1218: eed
1219: not
1220: _for
1221:  within
1222:  cor
1223: pon
1224: ign
1225: inalized
1226: _shapes
1227: doc
1228: rategy
1229:  Promo
1230: Mode
1231:  at
1232: tera
1233: ence
1234: .c
1235: valid
1236:  dtypes
1237:  traceable
1238: .type
1239: _contextlib
1240: ats
1241: move
1242:  "/
1243: ip
1244:  without
1245:  pass
1246: exit
1247:  obj
1248:  convert
1249: like
1250:  int
1251: Py
1252: sc
1253: item
1254: _spec
1255: defined
1256: ste
1257: stead
1258: ber
1259: .executing
1260:  expli
1261:  explicit
1262:  place
1263:  empty
1264:  ret
1265: _po
1266: ful
1267: respon
1268: ame
1269:  assert
1270:  Op
1271:  state
1272: _thread
1273:  label
1274:  nested
1275:  container
1276: _strategy
1277: licy
1278: ========
1279: =g
1280: orted
1281: _registry
1282: precated
1283: _on
1284: au
1285: [None
1286: Object
1287: .dtype
1288: numpy
1289:  multip
1290:  diff
1291: date
1292:  tuple
1293: (x
1294: ces
1295:  instead
1296:  data
1297:  variables
1298: feren
1299:  conversion
1300: Stack
1301:  executed
1302: .Traceable
1303:  {}
1304:  each
1305: "])

1306: LO
1307: .contextmanager
1308: af
1309: AL
1310: _key
1311: container
1312:  creator
1313: "):

1314: distr
1315: qui
1316:  B
1317: NT
1318: ES
1319: import
1320:  Itera
1321:  Iterator
1322: ssage
1323: -or
1324:  after
1325: wit
1326: witch
1327: tensorflow
1328:  provi
1329:  callable
1330: Context
1331: ting
1332:  multiple
1333:  attrs
1334: ray
1335: (e
1336: mented
1337: rectly
1338:  G
1339: ong
1340: n't
1341:  defined
1342:  defin
1343:  initi
1344:                       
1345: sume
1346: ure
1347:  being
1348: ind
1349:  []

1350: Node
1351: rary
1352: stack
1353: assed
1354: input
1355:  correspon
1356:  abo
1357: =["
1358: statistic
1359: collection
1360: .add
1361:  saved
1362: igh
1363: ww
1364:  Un
1365: RA
1366:  graphs
1367: allable
1368: quence
1369:  Any
1370: buf
1371:  core
1372: api
1373: raceback
1374: _a
1375: .is
1376: rge
1377:  po
1378: ).
1379: ))


1380: ms
1381: mplemented
1382: ay
1383:  back
1384: The
1385:  would
1386:  ev
1387: building
1388: append
1389:  mat
1390:  valid
1391:  instance
1392: _group
1393:  field
1394:  ol
1395:  old
1396:  passed
1397: _manager
1398: ils
1399: -doc
1400: -re
1401:  ignore
1402: most
1403: Flow
1404:  requi
1405: ither
1406: ast
1407:  compat
1408: ported
1409:  unique
1410: utation
1411:  caller
1412:  many
1413:  text
1414:  differe
1415:  different
1416: create
1417: .re
1418:  Note
1419:  doesn't
1420:  hasattr
1421:  Attr
1422: _output
1423: ference
1424: _O
1425: _R
1426:  Py
1427:  Python
1428: .mat
1429:  fol
1430:  follow
1431:  ass
1432:  was
1433:  mapping
1434:  {}

1435:  E
1436: _from
1437:  contains
1438:  final
1439:  finally
1440: lear
1441:  also
1442:  mo
1443: names
1444:  colocate
1445:  exist
1446:  deta
1447:  details
1448: .control
1449: global
1450: _policy
1451: Manager
1452: vo
1453: 11
1454: used
1455: .e
1456: .p
1457: util
1458: und
1459: _S
1460: _merge
1461: OTE
1462: ls
1463:  check
1464: (node
1465: (_
1466: _fn
1467: po
1468:  Symbolic
1469: _out
1470: .n
1471:  Tensors
1472:  some
1473: _enum
1474:  >>
1475:  >>>
1476:  tra
1477:  need
1478: verride
1479: pu
1480: (None
1481: `s
1482: )):

1483: ub
1484: ).


1485:  buffer
1486:  up
1487: ped
1488:  indi
1489:  uses
1490:  these
1491: _colocation
1492: ODE
1493:  like
1494:  Foo
1495: Keys
1496: _lock
1497: _kernel
1498: _functions
1499: library
1500: [name
1501: [op
1502: "


1503:  under
1504:  O
1505: ION
1506:  Context
1507:  numpy
1508:  config
1509: .util
1510:  NOTE
1511: string
1512: ents
1513: From
1514:  x
1515:  Not
1516:  len
1517: (a
1518: outer
1519:  D
1520:  export
1521:  kernel
1522:  than
1523: ark
1524:  ta
1525: _tensors
1526: ward
1527: .append
1528: ]]:

1529: GE
1530:  r
1531: ply
1532: .run
1533: ates
1534:  following
1535: peri
1536: periment
1537: _P
1538:  execute
1539: _gradient
1540: gister
1541: Default
1542: bind
1543: rapper
1544: andard
1545: -return
1546: -y
1547: -yield
1548:  specifies
1549:  controller
1550:  All
1551: //
1552: LI
1553:  either
1554: Str
1555: versions
1556: irst
1557: cord
1558:  global
1559: enter
1560: _comp
1561: atible
1562:  item
1563: loat
1564:  it's
1565: atus
1566: ception
1567:                    
1568: Implemented
1569:  directly
1570:  into
1571: (m
1572: du
1573:  num
1574: fore
1575:  `_
1576: plied
1577:  feed
1578: fix
1579: ture
1580:  pack
1581: ].
1582:  preferred
1583:  where
1584: _OP
1585: alize
1586: kes
1587: ession
1588:  gen
1589:  gene
1590:  %

1591: output
1592: .G
1593: .set
1594: we
1595: iz
1596: collections
1597:  building
1598: ous
1599:  inner
1600:  scopes
1601:  standard
1602: variables
1603: MENT
1604:  V
1605:  Y
1606: tt
1607:  required
1608: iting
1609:  np
1610: dev
1611: gg
1612: denti
1613:  k
1614: _only
1615: Stats
1616:  calls
1617:  supported
1618:  computation
1619: _code
1620:  such
1621:  We
1622: .s
1623: (obj
1624: ssi
1625:  getattr
1626: _numpy
1627: _index
1628:  support
1629: 32
1630:  reg
1631: ular
1632: way
1633: reates
1634: _as
1635:  consume
1636: _node
1637: _dict
1638:  expe
1639: ually
1640:                      
1641: radients
1642: ased
1643:  match
1644:  protoco
1645:  protocol
1646:  attributes
1647: Add
1648: Attr
1649:  """


1650:  reference
1651:  desc
1652:  descri
1653: long
1654: locations
1655: _groups
1656:  assign
1657:  property
1658: ('
1659: colocate
1660: (attr
1661: "_
1662: old
1663:  si
1664: .setter
1665: hared
1666: afe
1667:  provided
1668: .Variable
1669: _state
1670: Dependencies
1671: -to
1672: ain
1673: Function
1674: (...
1675: inner
1676: LA
1677:  promo
1678:  file
1679: ://
1680: are
1681: ations
1682:  first
1683: gging
1684:  lock
1685:  Remove
1686:  switch
1687: .B
1688: Device
1689: fied
1690: now
1691:  over
1692:  perform
1693: ause
1694:  ti
1695:  time
1696: ]):

1697:  possi
1698:  possible
1699:  prog
1700:  progra
1701: ()



1702: _repr
1703: cal
1704: .item
1705:  Num
1706: umm
1707: (),
1708: array
1709: format
1710:  beha
1711:  them
1712:  del
1713:  order
1714:  ran
1715: (s
1716:  mem
1717:  produ
1718:  H
1719:  pri
1720: vate
1721:  bet
1722:  alway
1723:  always
1724: atic
1725:  grad
1726: ok
1727:                
1728:  It
1729:  gradients
1730:  pub
1731:  public
1732:  prefix
1733:  compatibility
1734: _N
1735: (graph
1736: String
1737: Arg
1738: Argument
1739: lev
1740:  calling
1741:  explicitly
1742:  flow
1743:  chan
1744: ating
1745:  there
1746:  outputs
1747:  active
1748: '):

1749: Get
1750: etch
1751: ges
1752: Gradient
1753: tering
1754:  statistics
1755: lu
1756:  Wh
1757: ince
1758: ity
1759:  Session
1760: unctions
1761:  inside
1762:  proper
1763: ready
1764: line
1765: -too
1766: -long
1767: /c
1768: pybind
1769:  refer
1770: _controller
1771: ush
1772: _inner
1773:  currently
1774: ibution
1775:  innermost
1776: config
1777: _variables
1778: ache
1779: ")
1780: OU
1781: TION
1782: ning
1783: tern
1784: .core
1785: ator
1786: _utils
1787: precation
1788: .me
1789: ecause
1790: (context
1791: stra
1792: wise
1793:  conver
1794: ())

1795: ustom
1796: end
1797: new
1798: .value
1799:  constant
1800: =dtype
1801: ":
1802: =name
1803: outputs
1804:  block
1805: _outputs
1806: Ex
1807:  )

1808: tent
1809: ory
1810:  GPU
1811:  sing
1812: ord
1813:  undefined
1814: temp
1815:  sub
1816: gh
1817: )}
1818: rou
1819: .convert
1820: ffec
1821:  backward
1822:  based
1823: .Node
1824:  Node
1825: _bytes
1826: .items
1827: .attr
1828:  group
1829: .Op
1830: Input
1831: List
1832:  seri
1833:  serialized
1834:  creat
1835:  creating
1836: roto
1837: mul
1838: .Session
1839: ],

1840:  computed
1841:  indic
1842: ints
1843: cy
1844:  Operations
1845:  existing
1846: _val
1847:  inform
1848:  before
1849:  about
1850: king
1851: fo
1852: .Re
1853:  par
1854:  correspond
1855:  yet
1856:  then
1857: _and
1858:  gu
1859:  shared
1860:  com
1861: ook
1862: [-
1863:  betwe
1864:  between
1865: safe
1866:  threads
1867: _use
1868: _is
1869: tim
1870: timiz
1871: omatic
1872: pri
1873:  arguments
1874: check
1875: _not
1876: ](
1877: ttps
1878:  library
1879: naps
1880: napsh
1881: napshot
1882: (tf
1883:  Name
1884:  executing
1885: _can
1886: _candi
1887: _candidate
1888: Controller
1889: distribution
1890: distribute
1891: EV
1892: EVI
1893: EVICE
1894: _PLA
1895: _PLACE
1896: _PLACEMENT
1897: icen
1898: www
1899: .or
1900: .org
1901: ================
1902:  construct
1903: -name
1904:  record
1905: _api
1906: _call
1907: _callback
1908:  registry
1909: corator
1910: .de
1911:  work
1912:  remo
1913: auge
1914:  dict
1915: Spec
1916: ."""


1917: _null
1918: inen
1919: ineno
1920: igna
1921:  sk
1922:  skip
1923:  because
1924: ail
1925: (t
1926:  program
1927: _text
1928: Copy
1929: ake
1930:  creation
1931: size
1932: len
1933: _tuple
1934:  content
1935: ety
1936:  single
1937:  number
1938: grad
1939: _dims
1940:  !
1941:  !=
1942:  supplied
1943:  Attribute
1944: .building
1945: ters
1946:  packed
1947: Can
1948: pa
1949: ),

1950: mplement
1951: _convert
1952: ffect
1953: (value
1954: LID
1955: _NA
1956: _NAME
1957: _RE
1958: _REGE
1959: _REGEX
1960: -Z
1961: -Za
1962: -z
1963: Creates
1964: _se
1965:                        
1966: Proto
1967:                           
1968: .In
1969:  takes
1970:  representing
1971:  specify
1972: .match
1973: (inputs
1974: ',
1975: .inputs
1976:  corresponding
1977: An
1978: Any
1979: .outputs
1980:  assigned
1981:  above
1982: (function
1983: experiment
1984:  attemp
1985: ases
1986:  When
1987: just
1988:  Look
1989: ron
1990: LOB
1991: LOBAL
1992: ditional
1993: _override
1994: functions
1995: unf
1996: timizer
1997:  ""
1998: utomatic
1999:  initializ
2000: Callable
2001:  @_
2002: _finalized
2003: https
2004: _pybind
2005:  since
2006:  true
2007: tadata
2008: .pe
2009: .pee
2010: .peek
2011: vera
2012: ored
2013:  lif
2014: nested
2015: _uid
2016:  my
2017: quare
2018: _none
2019: _nonempty
2020: compatibility
2021: _compatibility
2022: MODE
2023: RAIN
2024: `:
2025: ight
2026:  Licen
2027: IT
2028: las
2029: -b
2030:  Callable
2031:  ty
2032: attern
2033:  Union
2034:  composite
2035:  errors
2036:  decorator
2037:  deprecated
2038: warg
2039: ("_
2040: ound
2041: min
2042: _C
2043: _IN
2044:  (

2045: _id
2046: (o
2047:  user
2048: nown
2049:  "%
2050: func
2051:  brea
2052:  break
2053: tri
2054: tions
2055:  read
2056: calar
2057: yle
2058: _internal
2059: index
2060: ())


2061: (n
2062: darray
2063: ves
2064:  pytype
2065: repr
2066: Not
2067: _version
2068: rray
2069:  contents
2070: opi
2071:  define
2072: _resource
2073: convert
2074:  backwards
2075: _composite
2076: dified
2077: ++
2078: xtra
2079: on't
2080: _desc
2081: _F
2082:  genera
2083:  model
2084:  dependen
2085:  dependency
2086: `,

2087:  expected
2088: original
2089: _pro
2090:  information
2091:  equ
2092: [Any
2093: ATE
2094: Set
2095: .py
2096: )))

2097: assert
2098: hile
2099:  hel
2100: ling
2101:  clear
2102: of
2103: TF
2104:  corresponds
2105:  defines
2106: _handle
2107:  how
2108: ooh
2109: oohic
2110: oohickey
2111: _LO
2112:                   
2113:  eagerly
2114: uring
2115: afety
2116:  mut
2117: _original
2118: finalized
2119: VE
2120: etchable
2121:  were
2122: ual
2123: ority
2124:  doc
2125: (key
2126:  nest
2127: ignature
2128:  already
2129: [Callable
2130: store
2131: .tensorflow
2132: /tensorflow
2133: rain
2134: Que
2135: Queue
2136:  behavi
2137:  behavior
2138:  overri
2139:  their
2140:  appro
2141:  temp
2142: ores
2143:  bi
2144: stall
2145:  mark
2146: _used
2147:  placed
2148:  off
2149:  offset
2150: queue
2151:  stateful
2152: .float
2153:  ..
2154: ({
2155:  labels
2156: _copy
2157: Wrapper
2158: )[
2159: server
2160: RAINABLE
2161: _fns
2162: 20
2163: ights
2164:  License
2165: the
2166: SE
2167: AR
2168:  imp
2169:  go
2170:  sy
2171:  cast
2172: Var
2173:  message
2174:  versions
2175:  avo
2176: -import
2177: unused
2178: _lo
2179:  logging
2180: dentity
2181:  traceback
2182: _T
2183: Base
2184: _A
2185: sage
2186: .enable
2187: .D
2188: .DType
2189: (object
2190: raw
2191:  Null
2192: Contextmanager
2193:  otherwise
2194:  av
2195:  avail
2196:  available
2197:  conv
2198:  scalar
2199:  repr
2200:  format
2201:  devices
2202: ummari
2203: internal
2204: (dtype
2205:  invo
2206:  callback
2207: =attr
2208: ative
2209: __,
2210:  CPU
2211: .ndarray
2212: ep
2213: pack
2214: =re
2215: =redefined
2216: -outer
2217: has
2218: Tensors
2219: mem
2220: only
2221: 42
2222: be
2223: .copy
2224: ost
2225: (shape
2226:  well
2227: perator
2228:  [

2229: ition
2230: ")


2231: (g
2232: sumer
2233:  eval
2234: [tensor
2235:  creates
2236: Cannot
2237: }")

2238: _h
2239: 15
2240: -arg
2241: [Eager
2242: Un
2243: Conver
2244: Converts
2245:  consumed
2246: ()`.

2247:  wan
2248:  wants
2249:  invalid
2250: (values
2251:  sequence
2252: .Composite
2253: ()`.


2254: "Re
2255:  res
2256: jo
2257: PE
2258: =[])

2259: _traceback
2260:  extra
2261: com
2262:  don't
2263: _sequence
2264:  Add
2265: very
2266: ish
2267: .message
2268:  constructor
2269:  List
2270:  By
2271:  represents
2272: Si
2273: Size
2274:  <
2275: ose
2276: VALID
2277: _locations
2278:  change
2279:  equiv
2280:  equiva
2281:  equivale
2282:  equivalent
2283:  itself
2284:  ro
2285:  root
2286:  instances
2287:  member
2288:  '/
2289:  descrip
2290:  description
2291:  nodes
2292: Pri
2293: Private
2294:  buf
2295:  shapes
2296: unt
2297:  oneof
2298: .list
2299: CT
2300:  even
2301: UN
2302: Run
2303: .*
2304: .Registry
2305:  defining
2306: erenti
2307: [[
2308: .lo
2309: okup
2310:  inc
2311:  inclu
2312:  +=
2313: ide
2314:  just
2315:  raised
2316:  during
2317: group
2318:  depend
2319:  seed
2320: RS
2321:  optimizer
2322: unique
2323:  they
2324: sses
2325:  sti
2326:  still
2327: ((
2328:  nesting
2329:  apply
2330:  ```

2331:  make
2332: [...
2333: [...,
2334:  previ
2335:  previous
2336: =line
2337: train
2338:  star
2339: tesize
2340: .exten
2341: .extend
2342: _Graph
2343:  while
2344:                            
2345: sive
2346: wri
2347: write
2348: elper
2349:  wrapper
2350: ving
2351:  "/":

2352: _metadata
2353: _objs
2354:  conc
2355:  appropri
2356:  appropriate
2357:  sets
2358: _collections
2359:  sure
2360:  ignored
2361:  reset
2362: ".

2363:  pr
2364:  print
2365: sets
2366:  newly
2367: .pop
2368: ked
2369: _top
2370:  trac
2371:  Ops
2372: man
2373: strings
2374:  runs
2375:  implement
2376:  Uses
2377: -local
2378: _outer
2379: SES
2380:  automatic
2381:  subset
2382: ILE
2383: YN
2384: YNC
2385: execution
2386:  server
2387:  local
2388: CAL
2389: _info
2390: My
2391: _safety
2392: licing
2393:  Ap
2394: ersion
2395: ;

2396: ance
2397:  You
2398:  ob
2399: plic
2400:  distr
2401:  specific
2402: .proto
2403:  avoid
2404:  protobuf
2405: invalid
2406: _tfe
2407: oring
2408:  pydev
2409: _callbacks
2410: .tf
2411: ")



2412:  once
2413: _gauge
2414: /api
2415: ",

2416: _D
2417: [type
2418:  provide
2419: pla
2420: play
2421: .M
2422:  lineno
2423:  non
2424:  times
2425:  **
2426: gac
2427: gacy
2428: teger
2429:  items
2430: __.
2431: (py
2432: (pywrap
2433: cls
2434: __)

2435: ify
2436: (type
2437: ).__
2438: bool
2439:  >
2440: zero
2441:  im
2442: =%
2443: Status
2444: status
2445: _exception
2446: ream
2447:  never
2448:  table
2449: sure
2450:  Use
2451: memory
2452: view
2453:  compatible
2454: sider
2455:  produce
2456: ever
2457:  produces
2458:  now
2459:  remove
2460: opies
2461: =self
2462:  ]


2463: [int
2464: deprecation
2465: .deprecated
2466: :"
2467: _dim
2468: _consumer
2469: apture
2470:  super
2471: 71
2472: sg
2473: (tensors
2474: "A
2475:  throu
2476:  through
2477:  accep
2478: ]]
2479: [Un
2480: [Union
2481:  '_
2482:  '_'
2483:  results
2484:  cases
2485:  effect
2486: /or
2487: dexed
2488: Sli
2489: Slices
2490: =compat
2491: /f
2492: (mr
2493: (mrry
2494: _.
2495: _.\
2496: _.\\
2497: ]*
2498: To
2499:  every
2500: .Invalid
2501:  Convert
2502: level
2503: .matmul
2504: `)
2505: [Operation
2506:  Valid
2507:  Used
2508: levant
2509:  describ
2510: "Rece
2511: "Receiv
2512: "Received
2513:  whose
2514:  lar
2515:  unused
2516: (i
2517:  (%
2518:  process
2519: cessing
2520:  useful
2521:  methods
2522:  location
2523:  evalu
2524: ne
2525: by
2526: :@
2527: ('/
2528: gpu
2529: ='
2530:  Traceable
2531: .obj
2532: '

2533:  keys
2534:  prev
2535: .colocate
2536:  index
2537:  help
2538: Bu
2539: Name
2540: =func
2541: (func
2542: .List
2543: (list
2544:  fields
2545:  ("
2546: `."""

2547: perimental
2548:  ",
2549: lean
2550: ages
2551: slo
2552: slots
2553:  ["_
2554: "]


2555: erentiable
2556: ration
2557: .lookup
2558:  operator
2559:  initial
2560: .statistic
2561:  pic
2562: les
2563:  partic
2564:  particular
2565:  containing
2566: [:
2567:  construction
2568: nch
2569: nchron
2570: lated
2571:  additional
2572: __()

2573:  #

2574:  stacks
2575: arning
2576:  necess
2577: fic
2578:  next
2579: eedable
2580: this
2581:  see
2582:  act
2583: compu
2584: compute
2585: _cache
2586: ave
2587:  creators
2588:  Yield
2589:  Yields
2590: tep
2591:  ke
2592:  maint
2593:  maintain
2594:  want
2595:  simp
2596:  simply
2597:  keyw
2598:  keyword
2599: ]]]:

2600: .default
2601:  finalized
2602:  cannot
2603:  version
2604:  mean
2605: code
2606:  inter
2607: /ex
2608: Defined
2609: tin
2610: ice
2611:  conf
2612:                                    
2613:  generate
2614:  refers
2615:  exists
2616: ."

2617:  coll
2618: (collection
2619:  Co
2620:  Collection
2621: yer
2622:  constra
2623: clo
2624:  resets
2625: ignore
2626:  overrid
2627:  overridden
2628: lea
2629: leared
2630:  nor
2631: isinstance
2632: EX
2633:           
2634: }):

2635: _run
2636: _outside
2637:  automatically
2638: job
2639:  As
2640:  Ex
2641: .stack
2642: _switch
2643: _switches
2644: (default
2645:  entering
2646: pat
2647: .Con
2648: .Config
2649:  DEVICE
2650: EA
2651: _MODE
2652:  seman
2653:  semantic
2654: UM
2655: UMM
2656:  LO
2657: exc
2658: _current
2659: .handle
2660: pensive
2661: _len
2662: FF
2663:  promotion
2664: LEG
2665: LEGA
2666: LEGAC
2667: LEGACY
2668: LL
2669: AF
2670: AFE
2671: _style
2672:  obtain
2673: less
2674:  ag
2675:  CON
2676: TIONS
2677:  li
2678: lasses
2679: ab
2680:  enum
2681:  npt
2682: 14
2683: =invalid
2684: -order
2685: .eager
2686:  mon
2687:  monit
2688:  monitoring
2689: lat
2690: identity
2691:  bound
2692: 30
2693: ix
2694: -in
2695:  These
2696:  removed
2697: ality
2698: hether
2699: TER
2700: TERN
2701: _TABLE
2702:  identi
2703: User
2704: .raw
2705: (dev
2706: >"
2707:  saf
2708:  mis
2709:  typ
2710:  typic
2711:  typically
2712: ))



2713: (contextlib
2714: .Ab
2715: .Abstra
2716: .Abstract
2717: kwarg
2718: kwargs
2719: .TFE
2720: _compatible
2721:  .
2722:  "<
2723: ("__
2724: .Py
2725:  symbolic
2726: __(

2727:  cls
2728: dict
2729: verify
2730: _bro
2731: _broad
2732: _broadc
2733: _broadcast
2734: Create
2735:  invoke
2736: .m
2737:  const
2738:  special
2739:  uni
2740: ().__
2741: =attribute
2742: -error
2743: redu
2744: Ok
2745: Exception
2746: lpack
2747:  stream
2748: Pack
2749:  performance
2750:  array
2751: memoryview
2752:  zero
2753:  rank
2754: _ar
2755: _arr
2756:  memory
2757:  How
2758:  However
2759: .,
2760:  performant
2761:  private
2762: pective
2763:  way
2764:  regular
2765:  known
2766: num
2767: Num
2768:  dest
2769: _fun
2770: dre
2771: Shape
2772:  initialized
2773: "Tensor
2774:  z
2775:  zip
2776:  implemented
2777:  what
2778:  look
2779: dtypes
2780: older
2781: posed
2782: ough
2783:  expect
2784:  event
2785:  eventually
2786: "All
2787: },
2788:  accepted
2789:  red
2790:  redund
2791:  redundant
2792:  )



2793: preferred
2794: ume
2795: _%
2796:  unmo
2797:  unmodified
2798:  Other
2799: /framework
2800: .fi
2801:  extract
2802: ky
2803:  might
2804: inish
2805:  validates
2806:  indicates
2807:  end
2808: -type
2809:  replic
2810: .By
2811: .Byte
2812: 40
2813: (control
2814: itialize
2815: _post
2816: _processing
2817: (input
2818:  indirectly
2819:  managers
2820:  There
2821: arily
2822: wn
2823: .st
2824: CATE
2825: Sets
2826: [t
2827:  locations
2828:  applied
2829: ines
2830: NODE
2831:  Then
2832:  coloc
2833:  prevent
2834: lease
2835: _same
2836: ached
2837: While
2838: .node
2839: .From
2840: Buffer
2841: _buf
2842: Clear
2843: wr
2844: _set
2845:  setting
2846:  none
2847:  us
2848: Register
2849: _grad
2850: .register
2851: Di
2852: No
2853:  made
2854:  attempt
2855: _stats
2856:  resources
2857:  include
2858:  doohickey
2859: Foo
2860: trie
2861:  making
2862:  ","
2863:  comm
2864:  Lookup
2865: qual
2866:  trail
2867:  trailing
2868: ATION
2869: _LOC
2870: _LOCK
2871: _G
2872: _GR
2873: _GROU
2874: _GROUP
2875: _RUN
2876:  Using
2877:  Def
2878: -safe
2879:  synchron
2880:  vari
2881:  various
2882: Loc
2883: Lock
2884:  modi
2885:  wa
2886: mil
2887: milar
2888:  could
2889: -level
2890: seed
2891: .O
2892: _versions
2893: Version
2894: .GRA
2895: .GRAP
2896: .GRAPH
2897:  Set
2898: unfetchable
2899: vers
2900:  last
2901:  losses
2902:  buil
2903: 10
2904: Exiting
2905: eso
2906: esource
2907:  compo
2908:  depends
2909:  previously
2910:  restore
2911:  [`
2912: `](
2913: /code
2914: /core
2915: inalize
2916:  After
2917: Runner
2918:  Internal
2919:  interf
2920:  interfa
2921:  interface
2922:  bytesize
2923: .library
2924:  ano
2925:  another
2926: /g
2927: oth
2928:  can't
2929:  contin
2930:  continue
2931:  whe
2932:  whether
2933:  overwrite
2934:  checks
2935: _helper
2936: _Operations
2937:  log
2938:  Apply
2939:  mapped
2940:  mess
2941:  messages
2942:  snapshot
2943: snapshot
2944: "]:

2945: _locked
2946:  ":"
2947:  Looks
2948: \"
2949:  exc
2950: err
2951: _msg
2952: sertion
2953:  makes
2954: ():
2955: -ex
2956:  trea
2957:  treated
2958:  Make
2959: (names
2960:  fil
2961:  means
2962:  collected
2963: _all
2964:  ""

2965: ,line
2966:  push
2967: ured
2968: /inner
2969:  stores
2970: my
2971: (...,
2972: -set
2973:  foo
2974: closing
2975:  constraints
2976: plies
2977:  layer
2978: .push
2979: /device
2980: _of
2981: IF
2982: IFO
2983:  most
2984:  rele
2985:  cleared
2986: .reset
2987: .container
2988:  q
2989:  domin
2990:  dominated
2991:  ...

2992: pred
2993:  tr
2994:  trig
2995:  loss
2996: zation
2997:  buffers
2998: _attrs
2999:  Install
3000: ({"
3001: _labels
3002: _mapping
3003: _mappings
3004: _this
3005: .distribute
3006: uto
3007: _assert
3008:  bias
3009: .one
3010: .ones
3011:  exception
3012:  init
3013:  outermost
3014: _entry
3015: .w
3016: (config
3017: nables
3018: (TF
3019:  picked
3020: _SILE
3021: _SILENT
3022: OR
3023: .DEVICE
3024:  argv
3025:  main
3026: igrate
3027:  Tensorflow
3028: _item
3029: ummary
3030: UE
3031: ING
3032:  LOCAL
3033:  TRAINABLE
3034: ESOU
3035: ESOUR
3036: ESOURCE
3037: (eager
3038:  Collections
3039: [Optional
3040: _symbolic
3041: __(*
3042: .scope
3043: _rep
3044: _replace
3045:  expensive
3046:  grou
3047:  grouped
3048: off
3049: legacy
3050: _slicing
3051: #

3052:  sof
3053:  soft
3054:  distribu
3055:  distributed
3056: AS
3057:  expre
3058: ang
3059: ================================
3060: -bad
3061:  threading
3062:  typing
3063:  Pattern
3064:  ab
3065:  full
3066:  imported
3067: filer
3068:  deprecation
3069: _ab
3070: _abc
3071:  kwarg
3072: ara
3073:  functionality
3074: _U
3075: PES
3076: _usage
3077: .Bool
3078: Gauge
3079: ops
3080: Whether
3081: Store
3082: -s
3083: .dis
3084: .display
3085:  dev
3086:  fname
3087: lineno
3088: known
3089:  safe
3090:  De
3091:  Deprecated
3092:  integer
3093: ID
3094:  representation
3095:  converts
3096:  formatting
3097:  para
3098:  paralle
3099:  parallel
3100:  access
3101: summari
3102: Symbolic
3103: update
3104:  verify
3105: .Copy
3106: =shape
3107: allow
3108: hs
3109: if
3110: .in
3111:  comple
3112:  float
3113: reduce
3114:  imm
3115:  immut
3116:  immutable
3117: )"
3118:  leng
3119:  length
3120: dims
3121:  dl
3122:  DL
3123:  DLPack
3124: .ref
3125: .Array
3126: Li
3127: Like
3128: sen
3129: sitive
3130: dat
3131: datat
3132: datatype
3133:  Unlike
3134:  doing
3135:  Consider
3136: iding
3137:  remote
3138:  maybe
3139:  executes
3140:  tw
3141:  Mark
3142:  rather
3143: av
3144:  elements
3145: .num
3146: method
3147:  Creates
3148: ecord
3149:  tape
3150: inition
3151:  definition
3152: Use
3153:  backed
3154:  gpu
3155: fies
3156: GPU
3157:  /
3158:  consumer
3159:  converti
3160:  convertible
3161:  placeh
3162:  placeholder
3163:  api
3164:  though
3165:  got
3166: .resource
3167:  range
3168: [i
3169: "b
3170: "but
3171: }-
3172: pag
3173:                          
3174: -argument
3175: _result
3176: 18
3177: 78
3178:  Fix
3179: [

3180:  ref
3181:  enume
3182:  enumerate
3183: =n
3184: =as
3185: =values
3186:  Otherwise
3187:  converted
3188: ques
3189: quested
3190: !r
3191:  respective
3192: .comp
3193: .compile
3194: .]
3195: .][
3196: _SC
3197: _SCO
3198: _SCOPE
3199:  flat
3200:  lists
3201:  wrap
3202:  wrapped
3203: (sky
3204: (skyew
3205: (skyewm
3206: apply
3207: constru
3208:                                         
3209: _Set
3210: _Add
3211: .Ser
3212: .Seri
3213: .Serialize
3214:  conven
3215:  conveni
3216: _Finish
3217: bjects
3218: )`
3219: Mat
3220: Mul
3221: _.\\-
3222: _.\\-/
3223: _.\\-/]*
3224: points
3225: base
3226: -typed
3227:  asso
3228:  associ
3229:  describes
3230:  incomp
3231:  incompatible
3232: "Argument
3233: )}.")

3234:  >=
3235: tems
3236:  '%
3237: _I
3238: _Import
3239: itializ
3240:  Gradient
3241: ass
3242:  evaluating
3243:  unne
3244:  unnecess
3245: bytes
3246:  groups
3247:  own
3248: RE
3249:  id
3250: ments
3251:  members
3252:  relevant
3253:  colocated
3254:  operation's
3255:  Each
3256: .h
3257: (num
3258: (compat
3259: )))


3260:  update
3261:  Reset
3262: dge
3263: ee
3264: .Operation
3265: }'
3266: ".
3267: (buf
3268:             
3269: (data
3270: _bu
3271: _buffer
3272: =wr
3273: =wrong
3274: -co
3275: -count
3276: Par
3277:  experimental
3278:  node's
3279:  info
3280: _PR
3281: _PROD
3282: _PRODU
3283: _PRODUCT
3284: SET
3285: disable
3286: Session
3287: ()`,
3288:  registering
3289: .Register
3290: sub
3291: Registers
3292: Diff
3293: Differentiable
3294: Speci
3295: -defined
3296: 46
3297:  hold
3298:  require
3299:  parame
3300:  forward
3301:  calc
3302:  calcul
3303:  running
3304:  allows
3305: tal
3306:  guide
3307:  coun
3308: tric
3309: doohickey
3310:  retrie
3311:  slas
3312:  slash
3313: [:-
3314: (resource
3315: deprecated
3316:  Define
3317:  note
3318:  external
3319:  synchroniz
3320:  large
3321:  related
3322: .GLOBAL
3323: cts
3324: via
3325:  acces
3326: -e
3327:  warning
3328:  mutate
3329: .create
3330:  necessary
3331:  modify
3332: fication
3333: .Group
3334:  choo
3335: .x
3336: (),

3337:  Default
3338:  alterna
3339:  alternative
3340: .Version
3341: VERS
3342: _CON
3343: !

3344: unfeedable
3345:  optimizers
3346:  actual
3347:  outside
3348: /"
3349: _loss
3350:  built
3351:  manually
3352:  vis
3353:  priority
3354: priority
3355:  step
3356: mb
3357: mbd
3358: mbda
3359: apt
3360:  composed
3361:  initialization
3362:  initializer
3363: .



3364: (creator
3365:  guard
3366:  again
3367:  exiting
3368:  modified
3369: /graph
3370: inaliz
3371: -only
3372: .train
3373:  envi
3374:  environ
3375:  environment
3376:  En
3377: .gradient
3378: .com
3379: _doc
3380: _docs
3381:  inferred
3382:  too
3383: ["_
3384: "].
3385: .signature
3386:  appen
3387: cond
3388:                                            
3389: ["
3390: est
3391:  indicating
3392: remove
3393:  Most
3394:  base
3395:  generated
3396:  conflic
3397:  conflicts
3398:  assignment
3399:  overhe
3400:  overhead
3401:  '/'
3402: .unique
3403: mutation
3404: (re
3405: =compute
3406: round
3407:  appe
3408:  appear
3409: _devices
3410:  concurrent
3411:  concurrently
3412:  Can
3413:  err
3414:  similar
3415:  Names
3416: ():`
3417:  thread's
3418: -exception
3419: uplic
3420:  regex
3421: (scope
3422: (item
3423: _keys
3424:  pushes
3425:  life
3426:  lifetime
3427: solu
3428: solute
3429:  weights
3430:  biases
3431: =scope
3432:  install
3433: cording
3434: ules
3435:  cha
3436:  chara
3437:  charac
3438:  "/"

3439: bugging
3440:  runtime
3441:  know
3442: cre
3443: _enclosing
3444:  applies
3445: Try
3446: Trying
3447:  spec
3448:  matmul
3449:  rec
3450:  recent
3451:  prior
3452: .queue
3453: .F
3454: .FIFO
3455: .FIFOQueue
3456:  norm
3457:  start
3458: ism
3459: seen
3460: _nodes
3461:  attempts
3462:  track
3463:  point
3464: IG
3465: IGH
3466: IGHT
3467:  trigger
3468:  direct
3469:  Resource
3470: EXPE
3471: EXPERI
3472: EXPERIMENT
3473: EXPERIMENTAL
3474: ({"_
3475:               
3476:  sele
3477: .kernel
3478: "}):

3479:  override
3480: Square
3481: .square
3482: _deps
3483: _controllers
3484: _distribute
3485:  comb
3486:  combined
3487: /execu
3488:  optional
3489:  ful
3490:  fully
3491: ask
3492: :f
3493: :foo
3494: :gpu
3495: .assert
3496: _equal
3497: )),
3498:  referen
3499:  references
3500: operation
3501: sess
3502: [Graph
3503: reset
3504: -flow
3505:  preser
3506:  sile
3507:  silent
3508:  silently
3509:  Example
3510: Enables
3511:  options
3512:  copies
3513: _FOR
3514:  changes
3515:  To
3516: (original
3517:  validate
3518: MODEL
3519:  mach
3520: SUMM
3521: ERS
3522: art
3523: _runner
3524: OV
3525: OVING
3526: _AVE
3527: _AVERA
3528: _AVERAGE
3529:  keep
3530: SSES
3531: ulari
3532: ularization
3533:  Variable
3534:  GLOBAL
3535: _INIT
3536: aver
3537: _RESOURCE
3538: ARY
3539: Initialize
3540: .Me
3541: .Message
3542: _exit
3543:  fn
3544:  semantics
3545: .OFF
3546: .ALL
3547: .SAFE
3548: _promo
3549: .LEGACY
3550:  Copy
3551: 201
3552:  Unless
3553:  wr
3554:  COND
3555:  K
3556:  impli
3557: mit
3558:  Sequence
3559:  app
3560:  goo
3561: gle
3562: .protobuf
3563: _tensorflow
3564:  iss
3565:  issue
3566:  issues
3567: ,g
3568: ,unused
3569: lient
3570: .ops
3571: profiler
3572:  trace
3573: _trace
3574: .types
3575: _identity
3576: _args
3577: 79
3578:  bug
3579: _oss
3580: orary
3581:  switches
3582: _USE
3583: enable
3584: /tf
3585: TY
3586: TYPES
3587: _INTERN
3588: INTERN
3589: -speci
3590:  merg
3591: .Mer
3592: .Merge
3593: .co
3594: _file
3595: ST
3596:  missing
3597: .merge
3598: .string
3599: .fast
3600: .sh
3601: ortc
3602: ortcut
3603: args
3604:  suppre
3605:  suppress
3606:  exceptions
3607:  uid
3608: _Py
3609:  tensor's
3610:  bytes
3611:  scalars
3612:  python
3613: unpr
3614: unprint
3615: unprintable
3616:  "\
3617:  custom
3618: prefer
3619: _custom
3620: _summari
3621: _summariz
3622: _summarizer
3623: summarize
3624:  )


3625: _constant
3626:  callbacks
3627: .tensor
3628: Const
3629: voke
3630: 70
3631:  On
3632: -op
3633:  pat
3634: const
3635: .N
3636: .Native
3637: comple
3638: complex
3639: float
3640:  complex
3641: (np
3642: __()


3643: .size
3644: non
3645:  differently
3646:  themsel
3647:  themselves
3648: epcopy
3649:  memo
3650: dlpack
3651:  *,
3652:  max
3653:  ):

3654:  Unused
3655: -None
3656: hash
3657:  intern
3658: sensitive
3659:  models
3660:  ensure
3661:  tran
3662: (sle
3663: (slebe
3664: (slebedev
3665: CPU
3666:  hol
3667:  holding
3668:  `.
3669: sually
3670:  host
3671: ())
3672:  two
3673:  et
3674:  etc
3675: unting
3676: deally
3677: _elements
3678: override
3679: _no
3680: _nograd
3681: Copies
3682: itialized
3683:  Record
3684:  backpro
3685: (dre
3686: (dresult
3687:  dre
3688:  dresult
3689: .record
3690: efore
3691:  dec
3692:  decla
3693: .identity
3694:  placement
3695: "Tensor's
3696: "with
3697: }.")

3698: ev
3699: eval
3700:  you'
3701: [dtypes
3702: _error
3703: _pre
3704: _prefix
3705: At
3706: .capture
3707:  So
3708:  Some
3709:  Return
3710:  subclass
3711:  mod
3712: 171
3713: ])
3714: msg
3715: "{
3716: }:
3717: )}")


3718:  Pro
3719: pagate
3720: (_):

3721: trace
3722: _hint
3723: 26
3724: 268
3725: 34
3726: 347
3727: 915
3728: =unused
3729:  mind
3730:  converting
3731:  preference
3732: Indexed
3733: .Se
3734: .Sequence
3735: =preferred
3736:  mismat
3737:  mismatch
3738: )]]:

3739: Output
3740:  Di
3741:                                  
3742: opied
3743: _VALID
3744: "^
3745: "^[
3746: _.\\/
3747: _.\\/>
3748: _.\\/>-
3749: _.\\/>-]*
3750: _.\\/>-]*$
3751: traceback
3752: .fil
3753: .filter
3754:  flatten
3755:  handles
3756: reconstru
3757: reconstruct
3758: _New
3759:                                                
3760:  dele
3761: use
3762: Trace
3763: (stack
3764: such
3765:  passing
3766: )`.

3767: classmethod
3768:  expression
3769:  ir
3770:  irre
3771:  irrelevant
3772:  endpoints
3773: .base
3774:  replica
3775:  replicated
3776:  <<
3777: 31
3778:  larger
3779: GB
3780: (md
3781: (mdan
3782: ::
3783: "`
3784:  FI
3785:  FIX
3786:  FIXME
3787: 22
3788: 225
3789:  shall
3790: .Indexed
3791: =op
3792: =inputs
3793: (cls
3794:  inv
3795:  invoc
3796:  invocations
3797:  line
3798:  thre
3799:  three
3800:  op's
3801:  Pass
3802: Ch
3803: Check
3804: .Add
3805: )]

3806: DE
3807: DEP
3808: DEPRE
3809: DEPRECATE
3810: DEPRECATED
3811: _ass
3812: _assign
3813: _assignments
3814: [traceable
3815: Code
3816:  filename
3817:  suppo
3818:  suppose
3819:  contained
3820:  lines
3821: 16
3822: _B
3823: ')


3824: .file
3825: .filename
3826: file
3827: .lineno
3828:  ...]
3829:  method's
3830:  []


3831:  lea
3832: ')

3833:  }
3834:  }


3835: Up
3836: Update
3837:  Please
3838:  cached
3839: while
3840: See
3841: Hack
3842:  helpful
3843: Inputs
3844:  goes
3845: .Set
3846: .Name
3847: _names
3848:  funcs
3849: =funcs
3850: =shapes
3851: .Clear
3852:  fetch
3853: _Get
3854: .Par
3855: .Parse
3856: hi
3857: hich
3858: _int
3859: .experimental
3860: .TFT
3861: _UN
3862: _UNSET
3863:  TFT
3864: :disable
3865: Runs
3866:  Call
3867:  Calling
3868:  nee
3869:  needed
3870: ched
3871:  maps
3872: _using
3873: 39
3874: 395
3875:  Register
3876: represent
3877: representing
3878:  respe
3879:  respect
3880:  parti
3881: uming
3882:  `"
3883: Sub
3884: (unused
3885: gative
3886: call
3887: @deprecation
3888: no
3889: Specifies
3890:  differentiable
3891: "."""

3892:  including
3893:  parameters
3894:  FLO
3895:  FLOP
3896:  inference
3897:  usage
3898:  that's
3899: Sta
3900: Stati
3901: Statistic
3902: Statistics
3903:  gives
3904:  form
3905: -known
3906:  hap
3907:  happen
3908: point
3909:  total
3910: tency
3911:  yo
3912:  your
3913:  counted
3914:  bas
3915:  basis
3916: cap
3917:  retrieve
3918:  comma
3919: (statistic
3920: stats
3921:  associated
3922:  identify
3923:  we'
3924:  stats
3925:  min
3926: _M
3927: UT
3928: UTATION
3929: SION
3930:  Graphs
3931:  units
3932:  recom
3933:  recommen
3934:  recommended
3935:  classes
3936:  Import
3937:  synchronization
3938: rb
3939: rbit
3940: rbitrary
3941:  convenience
3942:  store
3943:  via
3944:  accessor
3945:  accessors
3946:  programs
3947:  guara
3948:  guaran
3949:  guarante
3950:  reported
3951:  ille
3952:  illeg
3953:  illegal
3954:  going
3955:  wait
3956:  until
3957:  Functions
3958:  choose
3959:  union
3960:  rand
3961:  random
3962: =versions
3963: _DE
3964: _DEF
3965: _VERS
3966: _VERSION
3967:  St
3968:  dan
3969:  dange
3970:  dangero
3971:  dangerous
3972: ders
3973:  Al
3974:  behave
3975:  redu
3976:  reduction
3977:  Automatic
3978:  Cache
3979:  protobufs
3980: reduced
3981:  pair
3982:  pairs
3983:  tuples
3984:  {}


3985: ulate
3986:  fro
3987:  froz
3988:  frozen
3989:  ready
3990:  visi
3991:  visibility
3992: Scope
3993: .variable
3994:  Creator
3995:  Creators
3996:  high
3997:  higher
3998:  With
3999:  side
4000:  properly
4001:  kee
4002:  keeps
4003:  initializes
4004: (old
4005:  later
4006: istration
4007: sort
4008: lambda
4009: gether
4010: `.



4011:  signature
4012:  register
4013: ]]],

4014: [tuple
4015:  []
4016:  against
4017: dent
4018:  say
4019: .Queue
4020:  Unf
4021:  Unfinaliz
4022:  Unfinalizing
4023: act
4024:  starting
4025: _bytesize
4026: If
4027: .cached
4028: _definition
4029: ])


4030: using
4031: .import
4032: ithub
4033: /cc
4034: /index
4035: .md
4036:  had
4037:  adds
4038:  pybind
4039: ++,
4040:  iff
4041:  Both
4042:  rely
4043: sis
4044:  appended
4045: .input
4046: ateful
4047: ../
4048: /pybind
4049: Test
4050:  graph's
4051: cur
4052: Adds
4053: chil
4054: childre
4055: children
4056:  San
4057:  Sanity
4058: [compat
4059: .min
4060: 12
4061:  found
4062: )]


4063:  Helper
4064:  low
4065:  consumes
4066: -is
4067:  mutates
4068:  ensu
4069:  ensures
4070:  mutating
4071: (ret
4072:  around
4073:  ok
4074: .low
4075: .lower
4076:  requested
4077:  Do
4078:  overriding
4079: (map
4080: (mapped
4081: record
4082: _seen
4083:  metadata
4084: (colocation
4085: _stateful
4086: _operations
4087:  properti
4088:  properties
4089:  Create
4090:  informative
4091: ical
4092:  allowed
4093:  gi
4094:  give
4095:  nice
4096: plit
4097:  both
4098:  appears
4099: .bytes
4100:  looks
4101: \"<
4102: >:
4103: >:<
4104: >\"
4105: exist
4106:                     
4107:  Act
4108:  Actually
4109:  referr
4110:  referring
4111: _oper
4112: _Output
4113:  exi
4114:  exited
4115:  wish
4116: Stores
4117:  severa
4118:  several
4119:  treat
4120:  resulting
4121:  filtered
4122:  matches
4123:  Items
4124:  cho
4125:  choice
4126:  tok
4127:  token
4128:  tokens
4129:  filters
4130: Clears
4131:  hand
4132:  handler
4133:  annot
4134: thing
4135: era
4136:  maintains
4137: (...):
4138:  statement
4139:  onto
4140:  follows
4141:  capt
4142:  captured
4143: (...)
4144:  top
4145:  absolute
4146: _d
4147: (""
4148: (""):

4149:  overa
4150:  overall
4151: ')
4152: weights
4153: biases
4154: ffine
4155:  rules
4156:  Scope
4157:  Scopes
4158:  character
4159: "'
4160: "'{
4161:  pattern
4162:  {_
4163: .pattern
4164:  blocks
4165:  stru
4166:  struct
4167:  structured
4168:  sepa
4169: rated
4170:  debugging
4171:  display
4172: alization
4173:  marked
4174:  actually
4175:  "/"
4176: crement
4177: /scope
4178: .E
4179: Colocation
4180:  lib
4181:  libra
4182:  librari
4183:  libraries
4184: **
4185: _colocate
4186: onger
4187:  fut
4188:  future
4189: _tmp
4190:  frame
4191:  layers
4192: _off
4193: _offset
4194:  document
4195:  documentation
4196: :GPU
4197: _gpu
4198: cpu
4199:  wrappers
4200:  released
4201:  beco
4202:  become
4203: _container
4204:  normally
4205:  mech
4206:  mechan
4207:  mechanism
4208:  indicate
4209:  Clear
4210: push
4211: pop
4212: current
4213: For
4214:  adding
4215:  prun
4216:  contexts
4217:  waiting
4218: (pred
4219: dependencies
4220:  ded
4221:  deduplic
4222: (handle
4223:  manual
4224: ridge
4225:  operators
4226: )}):

4227:  Ad
4228:  Additional
4229: ))
4230:  select
4231: Custom
4232: custom
4233: _square
4234:  ...


4235: Mark
4236: Marks
4237:  unf
4238: Make
4239:  affect
4240: _specs
4241: versed
4242: _traceable
4243: [_
4244:  comment
4245: .group
4246: /executed
4247:  consider
4248:  general
4249: /t
4250: /task
4251: (container
4252:  UID
4253: =ignore
4254: _signature
4255: )])

4256: .math
4257: (bi
4258: (bias
4259: bad
4260:  Error
4261:  Traceback
4262:  Invalid
4263: 271
4264: 463
4265: 878
4266:  fav
4267:  favor
4268: ".


4269:  "`
4270: (session
4271: =sess
4272: ]):
4273: Global
4274: haps
4275:  hiding
4276: -block
4277: [[],
4278:  necessarily
4279:  live
4280: -building
4281:  often
4282:  Entering
4283:  entered
4284:  entry
4285:  pop
4286:  constructs
4287: .stop
4288: _recording
4289:  lifting
4290: oolean
4291: dic
4292: dicates
4293: .inside
4294:  provides
4295:  opposed
4296:  concre
4297:  concrete
4298:  startup
4299:  usable
4300:  configure
4301:  Po
4302:  Policy
4303:  controlling
4304:  releases
4305: _EX
4306: _EXP
4307: _EXPLI
4308: _EXPLIC
4309: _EXPLICIT
4310:  correct
4311: _W
4312: _WAR
4313: _WARN
4314: _INT
4315:  ones
4316:  dispat
4317:  SYNC
4318: ously
4319:  AS
4320: _ce
4321: _cell
4322: .vlo
4323: .vlog
4324: nab
4325: nabling
4326: .EA
4327: .EAGE
4328: .EAGER
4329: =config
4330: =device
4331: =execution
4332: Dis
4333: _safe
4334: Ser
4335: _has
4336: _be
4337: _been
4338:  policy
4339:  unnecessary
4340: (main
4341:  migrate
4342: -related
4343:  rewrite
4344: mig
4345: migration
4346: /gu
4347: /guide
4348: /m
4349: /migrate
4350:  Assertion
4351:  due
4352: 55
4353: .r
4354: .rstr
4355: .rstrip
4356: ("/
4357: ("/")

4358: -value
4359: -valued
4360: GLOBAL
4361:  acro
4362:  across
4363: mode
4364: model
4365: TRAINABLE
4366:  machine
4367:  trained
4368: ARI
4369: ARIES
4370:  summary
4371: QUE
4372: QUEUE
4373: _RUNN
4374: _RUNNERS
4375: _runners
4376:  moving
4377:  avera
4378:  averages
4379: moving
4380: _avera
4381: _average
4382: GU
4383: GULA
4384: GULARI
4385: GULARIZ
4386: GULARIZATION
4387: _LOSSES
4388:  regularization
4389: EIGHT
4390: EIGHTS
4391: IA
4392: IASES
4393: CTI
4394: CTIVA
4395: CTIVATIONS
4396:  ME
4397:  MET
4398:  METRI
4399:  METRIC
4400:  MODE
4401:  MODEL
4402: trainable
4403:  SUMM
4404: table
4405:  asset
4406: paths
4407:  MOVING
4408: atena
4409: atenated
4410: arded
4411:  CONCATE
4412:  CONCATEN
4413:  CONCATENATE
4414:  CONCATENATED
4415:  SA
4416: tiv
4417: tivations
4418: aveable
4419: _init
4420:  REA
4421:  READ
4422:  READY
4423: _STE
4424: _STEP
4425: _step
4426:  count
4427: _CONTE
4428: _CONTEX
4429: _CONTEXT
4430: SUMMARY
4431: _CO
4432: _COL
4433: _COLLE
4434: _COLLEC
4435: orts
4436: antle
4437:  part
4438:  templ
4439:  template
4440: *`
4441:  Speci
4442: Start
4443: `:


4444: /Add
4445: /a
4446:  auto
4447: restore
4448: state
4449: /,
4450: export
4451: "([
4452: "([\
4453: "([\^
4454: "([\^]
4455: "([\^]|
4456: :@|
4457: :@|^
4458: (.*
4459: (.*)
4460: (.*)"

4461: .sub
4462: (str
4463: "\
4464: .warning
4465:  Function
4466:  implements
4467: message
4468:  cir
4469:  circ
4470:  circular
4471: .Function
4472:  raw
4473:  Raw
4474: (fn
4475: correspon
4476: corresponding
4477: .number
4478: [input
4479:  OFF
4480:  LEGACY
4481: Py's
4482:  ALL
4483:  SAFE
4484: �
4485: "The
4486: promo
4487:  slicing
4488:  ints
4489: =ints
4490:  Copyr
4491:  Copyright
4492:  Aut
4493:  Auth
4494:  Author
4495:  Authors
4496:  Rights
4497:  Reser
4498:  Reserved
4499:  Licensed
4500:  Apache
4501:  Version
4502: Licen
4503: License
4504: ");

4505:  compli
4506:  compliance
4507:  htt
4508:  http
4509: .ap
4510: .apache
4511: /lic
4512: /licen
4513: /licenses
4514: /LI
4515: /LICE
4516: /LICEN
4517: /LICENSE
4518:  applic
4519:  applicable
4520:  law
4521:  agre
4522:  agreed
4523:  writing
4524:  softw
4525:  software
4526:  IS
4527:  BAS
4528:  BASI
4529:  BASIS
4530:  WIT
4531:  WITH
4532:  WITHOU
4533:  WITHOUT
4534:  WAR
4535:  WARRA
4536:  WARRANT
4537:  WARRANTI
4538:  WARRANTIES
4539:  OR
4540:  CONDI
4541:  CONDITIONS
4542:  OF
4543:  AN
4544:  ANY
4545:  KIN
4546:  KIND
4547:  express
4548:  implied
4549:  lang
4550:  langu
4551:  language
4552:  gover
4553:  governing
4554:  perm
4555:  permis
4556:  permission
4557:  permissions
4558:  limit
4559:  limitations
4560:  =================================
4561:  =================================================================
4562:  =========================================================================
4563:  =============================================================================
4564:  ==============================================================================
4565:  ==============================================================================

4566: Classes
4567: .ab
4568: .abc
4569:  contextlib
4570:  sys
4571:  abs
4572:  absl
4573:  google
4574: 143
4575: 110
4576: 113
4577: .client
4578: .plat
4579: .platform
4580: _logging
4581: .profiler
4582:  profiler
4583: .deprecation
4584: ="_
4585: 307
4586: 794
4587: 93
4588: 935
4589:  fix
4590:  fixed
4591:  Up
4592:  Upd
4593:  Updated
4594:  copyb
4595:  copybara
4596:  Te
4597:  Temp
4598:  Temporary
4599:  deter
4600:  determin
4601:  determining
4602: -pro
4603: -prog
4604: -progre
4605: -progress
4606: _API
4607: _SH
4608: _SHA
4609: _SHAPES
4610: /ops
4611: /enable
4612: _DTYPES
4613: [types
4614: .Data
4615:  identifi
4616:  identifier
4617: -specified
4618:  merged
4619: _filename
4620: _first
4621: _firstlineno
4622: unknown
4623: <%
4624: (ta
4625: (tay
4626: (tayl
4627: (taylor
4628: (taylorro
4629: (taylorrobi
4630: (taylorrobie
4631:  MU
4632:  MUST
4633:  signa
4634:  signals
4635:  callers
4636:  safely
4637:  null
4638:  merges
4639: -tri
4640: -trivi
4641: -trivial
4642:  cost
4643: .shortcut
4644: )))



4645: ]):


4646: Convert
4647:  Object
4648: (con
4649: (conv
4650:  legacy
4651:  pur
4652:  purpo
4653:  purposes
4654: _den
4655: _dense
4656: _like
4657: within
4658: _UID
4659: Hum
4660: Human
4661:  readable
4662: .issc
4663: .isscal
4664: .isscalar
4665: >"

4666: Either
4667:  Custom
4668:  compon
4669:  components
4670:  Control
4671:  Controls
4672:  style
4673: /ver
4674: /verbo
4675: /verbosi
4676: /verbosity
4677:  formatted
4678:  fri
4679:  friend
4680: =is
4681: __

4682: .make
4683: =verify
4684: =allow
4685: =tensor
4686:  {"
4687: }

4688:  [],
4689: =attrs
4690: .should
4691: _invoke
4692: 147
4693: 670
4694: 703
4695:  Once
4696:  paths
4697:  unified
4698: .invoke
4699: ,),
4700: .Value
4701: ()).__
4702: nonzero
4703: __


4704:  behaves
4705: >".__
4706: (),)


4707: deepcopy
4708: (%
4709:  dimen
4710:  dimension
4711: .ndims
4712: Scalar
4713: ()`")

4714: ()[
4715: .array
4716: _To
4717: Dlpack
4718: Cap
4719: Capsu
4720: Capsule
4721: _Dlpack
4722:  hash
4723:  hashable
4724:  unhash
4725:  unhashable
4726: Instead
4727: -sensitive
4728: [self
4729: ()]
4730:  arrays
4731:  safety
4732:  readonly
4733:  view
4734: .asarray
4735: (memoryview
4736: =int
4737: -copy
4738:  trans
4739:  transferred
4740:  avoiding
4741: -CPU
4742: (may
4743: (maybe
4744:  backing
4745: backing
4746:  usually
4747:  produced
4748:  avoids
4749:  Marked
4750:  pers
4751:  perspective
4752:  better
4753:  getting
4754:  expo
4755:  exposing
4756:  he
4757:  heav
4758:  heaven
4759:  forbi
4760:  forbid
4761: !).
4762:  Punting
4763:  ideally
4764:  thing
4765:  things
4766: ran
4767: rank
4768: Integer
4769:  Integer
4770: Number
4771:  Long
4772: static
4773: staticmethod
4774: _operator
4775:  setattr
4776: .en
4777: .ensure
4778: _initialized
4779: (ct
4780: (ctx
4781:  backprop
4782: =access
4783: -mem
4784: -member
4785: -before
4786: -def
4787: -definition
4788:  declared
4789: Ali
4790: Alias
4791:  cpu
4792:  Identi
4793:  Identifies
4794: -memory
4795: (gpu
4796:  Me
4797:  Method
4798:  Methods
4799:  consumers
4800: .consumer
4801: .consumers
4802:  you're
4803:  looking
4804: ?")


4805: Attemp
4806: Attempting
4807:  capture
4808: .",

4809: capture
4810: _const
4811: Capture
4812:  registers
4813:  modu
4814:  module
4815:  exposed
4816: 08
4817: 081
4818: 05
4819: 052
4820:  cove
4821:  covered
4822: =[])
4823: =[])(

4824: _In
4825: _Init
4826: (msg
4827:  msg
4828: }"
4829: }"



4830: ().


4831: "tensor
4832: "tensors
4833: ]._
4834: (len
4835: "F
4836: "Found
4837: )}.")


4838:  Propagate
4839: .pack
4840: Comp
4841: Computing
4842: packed
4843: @profiler
4844: .trace
4845: _wrap
4846: _wrapper
4847: =(
4848: ,),

4849: Implement
4850: Implementation
4851: 142
4852: 518
4853: 781
4854: -site
4855: -sites
4856:  ...,
4857: ]]:
4858:  Pre
4859:  Prese
4860:  Present
4861: =value
4862: "Requested
4863: =(

4864: ``,
4865: .to
4866:  Dictionary
4867: [k
4868:  Copied
4869: /node
4870: .cc
4871: ,jo
4872: ,jos
4873: ,josh
4874:  Conso
4875:  Consoli
4876:  Consolidate
4877:  validation
4878: _.\\/>-]*$")

4879: _.\\/>-]*$")



4880: @traceback
4881:  flattened
4882:  grouping
4883:  looked
4884: *.

4885: _library
4886: .apply
4887:  flattens
4888:  incom
4889:  incoming
4890:  Ref
4891:  Refac
4892:  Refactor
4893:                                        
4894:  deletes
4895: _Status
4896:  wor
4897:  worth
4898:  convenient
4899: -use
4900:  status
4901:                                           
4902:  stacktrace
4903: .extra
4904: .extract
4905: (stacklevel
4906: Represent
4907: Represents
4908:  performs
4909:  Objects
4910:  shortcut
4911: passed
4912: `).
4913: _.\\-/]*


4914:  generating
4915:  parent
4916:  `[
4917: ]`.
4918:  associate
4919: "Cannot
4920: "Size
4921: ()}
4922:  belong
4923: "`{
4924: }`
4925: "Ac
4926: "Accep
4927: "Accepted
4928:  conform
4929:  Reg
4930:  Regex
4931:  /{
4932:  /{_
4933: }/
4934: }/")


4935: 400
4936: 189
4937: )}")

4938: "I
4939: "Items
4940:  Bu
4941:  Buil
4942:  Build
4943: "Control
4944: "a
4945:  Indexed
4946:  Initialize
4947:  Post
4948:  flows
4949: Initializ
4950: Initializes
4951: Dev
4952: Specs
4953:  users
4954:  Dict
4955:  ways
4956:  gets
4957:  unnecessarily
4958: .Check
4959: Valid
4960: [bytes
4961: :@%
4962: .star
4963: .starts
4964: .startswith
4965: "loc
4966: :@")

4967:  ...]:

4968:  desi
4969:  desired
4970: ].


4971:  leaking
4972: ':
4973: _Data
4974:  enums
4975: Out
4976: Outputs
4977: .Update
4978: Edge
4979: (index
4980: _while
4981: Ra
4982: Raises
4983: can
4984: can't
4985:  '{
4986:  '{}'
4987: .Get
4988:  ]

4989: 423
4990: 59
4991: 591
4992:  dang
4993:  dangling
4994: ()))

4995: _De
4996: _Dele
4997: _Delete
4998: -al
4999: -alloc
